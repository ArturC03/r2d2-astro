const _astro_dataLayerContent = [["Map", 1, 2, 9, 10], "meta::meta", ["Map", 3, 4, 5, 6, 7, 8], "astro-version", "5.7.0", "content-config-digest", "9a95ec2e8398aaca", "astro-config-digest", '{"root":{},"srcDir":{},"publicDir":{},"outDir":{},"cacheDir":{},"compressHTML":true,"base":"/","trailingSlash":"ignore","output":"server","scopedStyleStrategy":"where","build":{"format":"directory","client":{},"server":{},"assets":"_astro","serverEntry":"entry.mjs","redirects":false,"inlineStylesheets":"auto","concurrency":1},"server":{"open":false,"host":false,"port":4321,"streaming":true,"allowedHosts":[]},"redirects":{},"image":{"endpoint":{"route":"/_image"},"service":{"entrypoint":"astro/assets/services/sharp","config":{}},"domains":[],"remotePatterns":[]},"devToolbar":{"enabled":true},"markdown":{"syntaxHighlight":false,"shikiConfig":{"langs":[],"langAlias":{},"theme":"css-variables","themes":{},"wrap":false,"transformers":[]},"remarkPlugins":[null,null,null],"rehypePlugins":[null,[null,{"themes":[{"name":"Night Owl No Italics","type":"dark","colors":{"focusBorder":"#122d42","foreground":"#d6deeb","disabledForeground":"#cccccc80","descriptionForeground":"#d6deebb3","errorForeground":"#ef5350","icon.foreground":"#c5c5c5","contrastActiveBorder":null,"contrastBorder":"#122d42","textBlockQuote.background":"#7f7f7f1a","textBlockQuote.border":"#007acc80","textCodeBlock.background":"#4f4f4f","textLink.activeForeground":"#3794ff","textLink.foreground":"#3794ff","textPreformat.foreground":"#d7ba7d","textSeparator.foreground":"#ffffff2e","editor.background":"#23262f","editor.foreground":"#d6deeb","editorLineNumber.foreground":"#4b6479","editorLineNumber.activeForeground":"#c5e4fd","editorActiveLineNumber.foreground":"#c6c6c6","editor.selectionBackground":"#1d3b53","editor.inactiveSelectionBackground":"#7e57c25a","editor.selectionHighlightBackground":"#5f7e9779","editorError.foreground":"#ef5350","editorWarning.foreground":"#b39554","editorInfo.foreground":"#3794ff","editorHint.foreground":"#eeeeeeb2","problemsErrorIcon.foreground":"#ef5350","problemsWarningIcon.foreground":"#b39554","problemsInfoIcon.foreground":"#3794ff","editor.findMatchBackground":"#5f7e9779","editor.findMatchHighlightBackground":"#1085bb5d","editor.findRangeHighlightBackground":"#3a3d4166","editorLink.activeForeground":"#4e94ce","editorLightBulb.foreground":"#ffcc00","editorLightBulbAutoFix.foreground":"#75beff","diffEditor.insertedTextBackground":"#99b76d23","diffEditor.insertedTextBorder":"#c5e47833","diffEditor.removedTextBackground":"#ef535033","diffEditor.removedTextBorder":"#ef53504d","diffEditor.insertedLineBackground":"#9bb95533","diffEditor.removedLineBackground":"#ff000033","editorStickyScroll.background":"#011627","editorStickyScrollHover.background":"#2a2d2e","editorInlayHint.background":"#5f7e97cc","editorInlayHint.foreground":"#ffffff","editorInlayHint.typeBackground":"#5f7e97cc","editorInlayHint.typeForeground":"#ffffff","editorInlayHint.parameterBackground":"#5f7e97cc","editorInlayHint.parameterForeground":"#ffffff","editorPane.background":"#011627","editorGroup.emptyBackground":"#011627","editorGroup.focusedEmptyBorder":null,"editorGroupHeader.tabsBackground":"var(--sl-color-black)","editorGroupHeader.tabsBorder":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","editorGroupHeader.noTabsBackground":"#011627","editorGroupHeader.border":null,"editorGroup.border":"#011627","editorGroup.dropBackground":"#7e57c273","editorGroup.dropIntoPromptForeground":"#d6deeb","editorGroup.dropIntoPromptBackground":"#021320","editorGroup.dropIntoPromptBorder":null,"sideBySideEditor.horizontalBorder":"#011627","sideBySideEditor.verticalBorder":"#011627","scrollbar.shadow":"#010b14","scrollbarSlider.background":"#ffffff17","scrollbarSlider.hoverBackground":"#ffffff40","scrollbarSlider.activeBackground":"#084d8180","panel.background":"#011627","panel.border":"#5f7e97","panelTitle.activeBorder":"#5f7e97","panelTitle.activeForeground":"#ffffffcc","panelTitle.inactiveForeground":"#d6deeb80","panelSectionHeader.background":"#80808051","terminal.background":"#011627","widget.shadow":"#011627","editorWidget.background":"#021320","editorWidget.foreground":"#d6deeb","editorWidget.border":"#5f7e97","quickInput.background":"#021320","quickInput.foreground":"#d6deeb","quickInputTitle.background":"#ffffff1a","pickerGroup.foreground":"#d1aaff","pickerGroup.border":"#011627","editor.hoverHighlightBackground":"#7e57c25a","editorHoverWidget.background":"#011627","editorHoverWidget.foreground":"#d6deeb","editorHoverWidget.border":"#5f7e97","editorHoverWidget.statusBarBackground":"#011a2f","titleBar.activeBackground":"var(--sl-color-black)","titleBar.activeForeground":"var(--sl-color-text)","titleBar.inactiveBackground":"#010e1a","titleBar.inactiveForeground":"#eeefff99","titleBar.border":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","toolbar.hoverBackground":"#5a5d5e50","toolbar.activeBackground":"#63666750","tab.activeBackground":"#0b2942","tab.unfocusedActiveBackground":"#0b2942","tab.inactiveBackground":"#01111d","tab.unfocusedInactiveBackground":"#01111d","tab.activeForeground":"var(--sl-color-text)","tab.inactiveForeground":"#5f7e97","tab.unfocusedActiveForeground":"#5f7e97","tab.unfocusedInactiveForeground":"#5f7e97","tab.hoverBackground":null,"tab.unfocusedHoverBackground":null,"tab.hoverForeground":null,"tab.unfocusedHoverForeground":null,"tab.border":"#272b3b","tab.lastPinnedBorder":"#585858","tab.activeBorder":"transparent","tab.unfocusedActiveBorder":"#262a39","tab.activeBorderTop":"var(--sl-color-accent-high)","tab.unfocusedActiveBorderTop":null,"tab.hoverBorder":null,"tab.unfocusedHoverBorder":null,"tab.activeModifiedBorder":"#3399cc","tab.inactiveModifiedBorder":"#3399cc80","tab.unfocusedActiveModifiedBorder":"#3399cc80","tab.unfocusedInactiveModifiedBorder":"#3399cc40","badge.background":"#5f7e97","badge.foreground":"#ffffff","button.background":"#7e57c2cc","button.foreground":"#ffffffcc","button.border":"#122d42","button.separator":"#ffffff52","button.hoverBackground":"#7e57c2","button.secondaryBackground":"#3a3d41","button.secondaryForeground":"#ffffff","button.secondaryHoverBackground":"#46494e","dropdown.background":"#011627","dropdown.foreground":"#ffffffcc","dropdown.border":"#5f7e97","list.activeSelectionBackground":"#234d708c","list.activeSelectionForeground":"#ffffff","tree.indentGuidesStroke":"#585858","input.background":"#0b253a","input.foreground":"#ffffffcc","input.placeholderForeground":"#5f7e97","inputOption.activeBorder":"#ffffffcc","inputOption.hoverBackground":"#5a5d5e80","inputOption.activeBackground":"#122d4266","inputOption.activeForeground":"#ffffff","inputValidation.infoBackground":"#00589ef2","inputValidation.infoBorder":"#64b5f6","inputValidation.warningBackground":"#675700f2","inputValidation.warningBorder":"#ffca28","inputValidation.errorBackground":"#ab0300f2","inputValidation.errorBorder":"#ef5350","keybindingLabel.background":"#8080802b","keybindingLabel.foreground":"#cccccc","keybindingLabel.border":"#33333399","keybindingLabel.bottomBorder":"#44444499","menu.foreground":"#ffffffcc","menu.background":"#011627","menu.selectionForeground":"#ffffff","menu.selectionBackground":"#234d708c","menu.separatorBackground":"#606060","editor.snippetTabstopHighlightBackground":"#7c7c74c","editor.snippetFinalTabstopHighlightBorder":"#525252","terminal.ansiBlack":"#011627","terminal.ansiRed":"#ef5350","terminal.ansiGreen":"#22da6e","terminal.ansiYellow":"#c5e478","terminal.ansiBlue":"#82aaff","terminal.ansiMagenta":"#c792ea","terminal.ansiCyan":"#21c7a8","terminal.ansiWhite":"#ffffff","terminal.ansiBrightBlack":"#575656","terminal.ansiBrightRed":"#ef5350","terminal.ansiBrightGreen":"#22da6e","terminal.ansiBrightYellow":"#ffeb95","terminal.ansiBrightBlue":"#82aaff","terminal.ansiBrightMagenta":"#c792ea","terminal.ansiBrightCyan":"#7fdbca","terminal.ansiBrightWhite":"#ffffff","selection.background":"#4373c2","input.border":"#5f7e97","punctuation.definition.generic.begin.html":"#ef5350f2","progress.background":"#7e57c2","breadcrumb.foreground":"#a599e9","breadcrumb.focusForeground":"#ffffff","breadcrumb.activeSelectionForeground":"#ffffff","breadcrumbPicker.background":"#001122","list.invalidItemForeground":"#975f94","list.dropBackground":"#011627","list.focusBackground":"#010d18","list.focusForeground":"#ffffff","list.highlightForeground":"#ffffff","list.hoverBackground":"#011627","list.hoverForeground":"#ffffff","list.inactiveSelectionBackground":"#0e293f","list.inactiveSelectionForeground":"#5f7e97","activityBar.background":"#011627","activityBar.dropBackground":"#5f7e97","activityBar.foreground":"#5f7e97","activityBar.border":"#011627","activityBarBadge.background":"#44596b","activityBarBadge.foreground":"#ffffff","sideBar.background":"#011627","sideBar.foreground":"#89a4bb","sideBar.border":"#011627","sideBarTitle.foreground":"#5f7e97","sideBarSectionHeader.background":"#011627","sideBarSectionHeader.foreground":"#5f7e97","editorCursor.foreground":"#80a4c2","editor.wordHighlightBackground":"#f6bbe533","editor.wordHighlightStrongBackground":"#e2a2f433","editor.lineHighlightBackground":"#0003","editor.rangeHighlightBackground":"#7e57c25a","editorIndentGuide.background":"#5e81ce52","editorIndentGuide.activeBackground":"#7e97ac","editorRuler.foreground":"#5e81ce52","editorCodeLens.foreground":"#5e82ceb4","editorBracketMatch.background":"#5f7e974d","editorOverviewRuler.currentContentForeground":"#7e57c2","editorOverviewRuler.incomingContentForeground":"#7e57c2","editorOverviewRuler.commonContentForeground":"#7e57c2","editorGutter.background":"#011627","editorGutter.modifiedBackground":"#e2b93d","editorGutter.addedBackground":"#9ccc65","editorGutter.deletedBackground":"#ef5350","editorSuggestWidget.background":"#2c3043","editorSuggestWidget.border":"#2b2f40","editorSuggestWidget.foreground":"#d6deeb","editorSuggestWidget.highlightForeground":"#ffffff","editorSuggestWidget.selectedBackground":"#5f7e97","debugExceptionWidget.background":"#011627","debugExceptionWidget.border":"#5f7e97","editorMarkerNavigation.background":"#0b2942","editorMarkerNavigationError.background":"#ef5350","editorMarkerNavigationWarning.background":"#ffca28","peekView.border":"#5f7e97","peekViewEditor.background":"#011627","peekViewEditor.matchHighlightBackground":"#7e57c25a","peekViewResult.background":"#011627","peekViewResult.fileForeground":"#5f7e97","peekViewResult.lineForeground":"#5f7e97","peekViewResult.matchHighlightBackground":"#ffffffcc","peekViewResult.selectionBackground":"#2e3250","peekViewResult.selectionForeground":"#5f7e97","peekViewTitle.background":"#011627","peekViewTitleDescription.foreground":"#697098","peekViewTitleLabel.foreground":"#5f7e97","merge.currentHeaderBackground":"#5f7e97","merge.incomingHeaderBackground":"#7e57c25a","statusBar.background":"#011627","statusBar.foreground":"#5f7e97","statusBar.border":"#262a39","statusBar.debuggingBackground":"#202431","statusBar.debuggingBorder":"#1f2330","statusBar.noFolderBackground":"#011627","statusBar.noFolderBorder":"#25293a","statusBarItem.activeBackground":"#202431","statusBarItem.hoverBackground":"#202431","statusBarItem.prominentBackground":"#202431","statusBarItem.prominentHoverBackground":"#202431","notifications.background":"#01111d","notifications.border":"#262a39","notificationCenter.border":"#262a39","notificationToast.border":"#262a39","notifications.foreground":"#ffffffcc","notificationLink.foreground":"#80cbc4","extensionButton.prominentForeground":"#ffffffcc","extensionButton.prominentBackground":"#7e57c2cc","extensionButton.prominentHoverBackground":"#7e57c2","terminal.selectionBackground":"#1b90dd4d","terminalCursor.background":"#234d70","debugToolBar.background":"#011627","welcomePage.buttonBackground":"#011627","welcomePage.buttonHoverBackground":"#011627","walkThrough.embeddedEditorBackground":"#011627","gitDecoration.modifiedResourceForeground":"#a2bffc","gitDecoration.deletedResourceForeground":"#ef535090","gitDecoration.untrackedResourceForeground":"#c5e478ff","gitDecoration.ignoredResourceForeground":"#395a75","gitDecoration.conflictingResourceForeground":"#ffeb95cc","source.elm":"#5f7e97","string.quoted.single.js":"#ffffff","meta.objectliteral.js":"#82aaff"},"fg":"#d6deeb","bg":"#23262f","semanticHighlighting":false,"settings":[{"name":"Changed","scope":["markup.changed","meta.diff.header.git","meta.diff.header.from-file","meta.diff.header.to-file"],"settings":{"foreground":"#a2bffc"}},{"name":"Deleted","scope":["markup.deleted.diff"],"settings":{"foreground":"#f27775fe"}},{"name":"Inserted","scope":["markup.inserted.diff"],"settings":{"foreground":"#c5e478"}},{"name":"Global settings","settings":{"background":"#011627","foreground":"#d6deeb"}},{"name":"Comment","scope":["comment"],"settings":{"foreground":"#919f9f","fontStyle":""}},{"name":"String","scope":["string"],"settings":{"foreground":"#ecc48d"}},{"name":"String Quoted","scope":["string.quoted","variable.other.readwrite.js"],"settings":{"foreground":"#ecc48d"}},{"name":"Support Constant Math","scope":["support.constant.math"],"settings":{"foreground":"#c5e478"}},{"name":"Number","scope":["constant.numeric","constant.character.numeric"],"settings":{"foreground":"#f78c6c","fontStyle":""}},{"name":"Built-in constant","scope":["constant.language","punctuation.definition.constant","variable.other.constant"],"settings":{"foreground":"#82aaff"}},{"name":"User-defined constant","scope":["constant.character","constant.other"],"settings":{"foreground":"#82aaff"}},{"name":"Constant Character Escape","scope":["constant.character.escape"],"settings":{"foreground":"#f78c6c"}},{"name":"RegExp String","scope":["string.regexp","string.regexp keyword.other"],"settings":{"foreground":"#5ca7e4"}},{"name":"Comma in functions","scope":["meta.function punctuation.separator.comma"],"settings":{"foreground":"#889fb2"}},{"name":"Variable","scope":["variable"],"settings":{"foreground":"#c5e478"}},{"name":"Keyword","scope":["punctuation.accessor","keyword"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Storage","scope":["storage","meta.var.expr","meta.class meta.method.declaration meta.var.expr storage.type.js","storage.type.property.js","storage.type.property.ts","storage.type.property.tsx"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Storage type","scope":["storage.type"],"settings":{"foreground":"#c792ea"}},{"name":"Storage type","scope":["storage.type.function.arrow.js"],"settings":{"fontStyle":""}},{"name":"Class name","scope":["entity.name.class","meta.class entity.name.type.class"],"settings":{"foreground":"#ffcb8b"}},{"name":"Inherited class","scope":["entity.other.inherited-class"],"settings":{"foreground":"#c5e478"}},{"name":"Function name","scope":["entity.name.function"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Meta Tag","scope":["punctuation.definition.tag","meta.tag"],"settings":{"foreground":"#7fdbca"}},{"name":"HTML Tag names","scope":["entity.name.tag","meta.tag.other.html","meta.tag.other.js","meta.tag.other.tsx","entity.name.tag.tsx","entity.name.tag.js","entity.name.tag","meta.tag.js","meta.tag.tsx","meta.tag.html"],"settings":{"foreground":"#caece6","fontStyle":""}},{"name":"Tag attribute","scope":["entity.other.attribute-name"],"settings":{"fontStyle":"","foreground":"#c5e478"}},{"name":"Entity Name Tag Custom","scope":["entity.name.tag.custom"],"settings":{"foreground":"#c5e478"}},{"name":"Library (function & constant)","scope":["support.function","support.constant"],"settings":{"foreground":"#82aaff"}},{"name":"Support Constant Property Value meta","scope":["support.constant.meta.property-value"],"settings":{"foreground":"#7fdbca"}},{"name":"Library class/type","scope":["support.type","support.class"],"settings":{"foreground":"#c5e478"}},{"name":"Support Variable DOM","scope":["support.variable.dom"],"settings":{"foreground":"#c5e478"}},{"name":"Invalid","scope":["invalid"],"settings":{"background":"#ff2c83","foreground":"#ffffff"}},{"name":"Invalid deprecated","scope":["invalid.deprecated"],"settings":{"foreground":"#ffffff","background":"#d3423e"}},{"name":"Keyword Operator","scope":["keyword.operator"],"settings":{"foreground":"#7fdbca","fontStyle":""}},{"name":"Keyword Operator Relational","scope":["keyword.operator.relational"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Keyword Operator Assignment","scope":["keyword.operator.assignment"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Arithmetic","scope":["keyword.operator.arithmetic"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Bitwise","scope":["keyword.operator.bitwise"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Increment","scope":["keyword.operator.increment"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Ternary","scope":["keyword.operator.ternary"],"settings":{"foreground":"#c792ea"}},{"name":"Double-Slashed Comment","scope":["comment.line.double-slash"],"settings":{"foreground":"#919f9f"}},{"name":"Object","scope":["object"],"settings":{"foreground":"#cdebf7"}},{"name":"Null","scope":["constant.language.null"],"settings":{"foreground":"#ff6a83"}},{"name":"Meta Brace","scope":["meta.brace"],"settings":{"foreground":"#d6deeb"}},{"name":"Meta Delimiter Period","scope":["meta.delimiter.period"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Punctuation Definition String","scope":["punctuation.definition.string"],"settings":{"foreground":"#d9f5dd"}},{"name":"Punctuation Definition String Markdown","scope":["punctuation.definition.string.begin.markdown"],"settings":{"foreground":"#ff6a83"}},{"name":"Boolean","scope":["constant.language.boolean"],"settings":{"foreground":"#ff6a83"}},{"name":"Object Comma","scope":["object.comma"],"settings":{"foreground":"#ffffff"}},{"name":"Variable Parameter Function","scope":["variable.parameter.function"],"settings":{"foreground":"#7fdbca","fontStyle":""}},{"name":"Support Type Property Name & entity name tags","scope":["support.type.vendor.property-name","support.constant.vendor.property-value","support.type.property-name","meta.property-list entity.name.tag"],"settings":{"foreground":"#80cbc4","fontStyle":""}},{"name":"Entity Name tag reference in stylesheets","scope":["meta.property-list entity.name.tag.reference"],"settings":{"foreground":"#57eaf1"}},{"name":"Constant Other Color RGB Value Punctuation Definition Constant","scope":["constant.other.color.rgb-value punctuation.definition.constant"],"settings":{"foreground":"#f78c6c"}},{"name":"Constant Other Color","scope":["constant.other.color"],"settings":{"foreground":"#ffeb95"}},{"name":"Keyword Other Unit","scope":["keyword.other.unit"],"settings":{"foreground":"#ffeb95"}},{"name":"Meta Selector","scope":["meta.selector"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Entity Other Attribute Name Id","scope":["entity.other.attribute-name.id"],"settings":{"foreground":"#fad430"}},{"name":"Meta Property Name","scope":["meta.property-name"],"settings":{"foreground":"#80cbc4"}},{"name":"Doctypes","scope":["entity.name.tag.doctype","meta.tag.sgml.doctype"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Punctuation Definition Parameters","scope":["punctuation.definition.parameters"],"settings":{"foreground":"#d9f5dd"}},{"name":"Keyword Control Operator","scope":["keyword.control.operator"],"settings":{"foreground":"#7fdbca"}},{"name":"Keyword Operator Logical","scope":["keyword.operator.logical"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Variable Instances","scope":["variable.instance","variable.other.instance","variable.readwrite.instance","variable.other.readwrite.instance","variable.other.property"],"settings":{"foreground":"#7fdbca"}},{"name":"Variable Property Other object property","scope":["variable.other.object.property"],"settings":{"foreground":"#faf39f","fontStyle":""}},{"name":"Variable Property Other object","scope":["variable.other.object.js"],"settings":{"fontStyle":""}},{"name":"Entity Name Function","scope":["entity.name.function"],"settings":{"foreground":"#82aaff","fontStyle":""}},{"name":"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby","scope":["keyword.control.conditional.js","keyword.operator.comparison","keyword.control.flow.js","keyword.control.flow.ts","keyword.control.flow.tsx","keyword.control.ruby","keyword.control.def.ruby","keyword.control.loop.js","keyword.control.loop.ts","keyword.control.import.js","keyword.control.import.ts","keyword.control.import.tsx","keyword.control.from.js","keyword.control.from.ts","keyword.control.from.tsx","keyword.control.conditional.js","keyword.control.conditional.ts","keyword.control.switch.js","keyword.control.switch.ts","keyword.operator.instanceof.js","keyword.operator.expression.instanceof.ts","keyword.operator.expression.instanceof.tsx"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords","scope":["support.constant","keyword.other.special-method","keyword.other.new","keyword.other.debugger","keyword.control"],"settings":{"foreground":"#7fdbca"}},{"name":"Support Function","scope":["support.function"],"settings":{"foreground":"#c5e478"}},{"name":"Invalid Broken","scope":["invalid.broken"],"settings":{"foreground":"#989da0","background":"#F78C6C"}},{"name":"Invalid Unimplemented","scope":["invalid.unimplemented"],"settings":{"background":"#8BD649","foreground":"#ffffff"}},{"name":"Invalid Illegal","scope":["invalid.illegal"],"settings":{"foreground":"#ffffff","background":"#ec5f67"}},{"name":"Language Variable","scope":["variable.language"],"settings":{"foreground":"#7fdbca"}},{"name":"Support Variable Property","scope":["support.variable.property"],"settings":{"foreground":"#7fdbca"}},{"name":"Variable Function","scope":["variable.function"],"settings":{"foreground":"#82aaff"}},{"name":"Variable Interpolation","scope":["variable.interpolation"],"settings":{"foreground":"#ef787f"}},{"name":"Meta Function Call","scope":["meta.function-call"],"settings":{"foreground":"#82aaff"}},{"name":"Punctuation Section Embedded","scope":["punctuation.section.embedded"],"settings":{"foreground":"#e2817f"}},{"name":"Punctuation Tweaks","scope":["punctuation.terminator.expression","punctuation.definition.arguments","punctuation.definition.array","punctuation.section.array","meta.array"],"settings":{"foreground":"#d6deeb"}},{"name":"More Punctuation Tweaks","scope":["punctuation.definition.list.begin","punctuation.definition.list.end","punctuation.separator.arguments","punctuation.definition.list"],"settings":{"foreground":"#d9f5dd"}},{"name":"Template Strings","scope":["string.template meta.template.expression"],"settings":{"foreground":"#e2817f"}},{"name":"Backtics(``) in Template Strings","scope":["string.template punctuation.definition.string"],"settings":{"foreground":"#d6deeb"}},{"name":"Italics","scope":["italic"],"settings":{"foreground":"#c792ea","fontStyle":"italic"}},{"name":"Bold","scope":["bold"],"settings":{"foreground":"#c5e478","fontStyle":"bold"}},{"name":"Quote","scope":["quote"],"settings":{"foreground":"#969bb7","fontStyle":""}},{"name":"Raw Code","scope":["raw"],"settings":{"foreground":"#80cbc4"}},{"name":"CoffeScript Variable Assignment","scope":["variable.assignment.coffee"],"settings":{"foreground":"#31e1eb"}},{"name":"CoffeScript Parameter Function","scope":["variable.parameter.function.coffee"],"settings":{"foreground":"#d6deeb"}},{"name":"CoffeeScript Assignments","scope":["variable.assignment.coffee"],"settings":{"foreground":"#7fdbca"}},{"name":"C# Readwrite Variables","scope":["variable.other.readwrite.cs"],"settings":{"foreground":"#d6deeb"}},{"name":"C# Classes & Storage types","scope":["entity.name.type.class.cs","storage.type.cs"],"settings":{"foreground":"#ffcb8b"}},{"name":"C# Namespaces","scope":["entity.name.type.namespace.cs"],"settings":{"foreground":"#b2ccd6"}},{"name":"C# Unquoted String Zone","scope":["string.unquoted.preprocessor.message.cs"],"settings":{"foreground":"#d6deeb"}},{"name":"C# Region","scope":["punctuation.separator.hash.cs","keyword.preprocessor.region.cs","keyword.preprocessor.endregion.cs"],"settings":{"foreground":"#ffcb8b","fontStyle":"bold"}},{"name":"C# Other Variables","scope":["variable.other.object.cs"],"settings":{"foreground":"#b2ccd6"}},{"name":"C# Enum","scope":["entity.name.type.enum.cs"],"settings":{"foreground":"#c5e478"}},{"name":"Dart String","scope":["string.interpolated.single.dart","string.interpolated.double.dart"],"settings":{"foreground":"#ffcb8b"}},{"name":"Dart Class","scope":["support.class.dart"],"settings":{"foreground":"#ffcb8b"}},{"name":"Tag names in Stylesheets","scope":["entity.name.tag.css","entity.name.tag.less","entity.name.tag.custom.css","support.constant.property-value.css"],"settings":{"foreground":"#ff6d6d","fontStyle":""}},{"name":"Wildcard(*) selector in Stylesheets","scope":["entity.name.tag.wildcard.css","entity.name.tag.wildcard.less","entity.name.tag.wildcard.scss","entity.name.tag.wildcard.sass"],"settings":{"foreground":"#7fdbca"}},{"name":"CSS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#ffeb95"}},{"name":"Attribute Name for CSS","scope":["meta.attribute-selector.css entity.other.attribute-name.attribute","variable.other.readwrite.js"],"settings":{"foreground":"#f78c6c"}},{"name":"Elixir Classes","scope":["source.elixir support.type.elixir","source.elixir meta.module.elixir entity.name.class.elixir"],"settings":{"foreground":"#82aaff"}},{"name":"Elixir Functions","scope":["source.elixir entity.name.function"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir Constants","scope":["source.elixir constant.other.symbol.elixir","source.elixir constant.other.keywords.elixir"],"settings":{"foreground":"#82aaff"}},{"name":"Elixir String Punctuations","scope":["source.elixir punctuation.definition.string"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir","scope":["source.elixir variable.other.readwrite.module.elixir","source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir Binary Punctuations","scope":["source.elixir .punctuation.binary.elixir"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Closure Constant Keyword","scope":["constant.keyword.clojure"],"settings":{"foreground":"#7fdbca"}},{"name":"Go Function Calls","scope":["source.go meta.function-call.go"],"settings":{"foreground":"#dddddd"}},{"name":"Go Keywords","scope":["source.go keyword.package.go","source.go keyword.import.go","source.go keyword.function.go","source.go keyword.type.go","source.go keyword.struct.go","source.go keyword.interface.go","source.go keyword.const.go","source.go keyword.var.go","source.go keyword.map.go","source.go keyword.channel.go","source.go keyword.control.go"],"settings":{"foreground":"#c792ea"}},{"name":"Go Constants e.g. nil, string format (%s, %d, etc.)","scope":["source.go constant.language.go","source.go constant.other.placeholder.go"],"settings":{"foreground":"#ff6a83"}},{"name":"C++ Functions","scope":["entity.name.function.preprocessor.cpp","entity.scope.name.cpp"],"settings":{"foreground":"#7fdbca"}},{"name":"C++ Meta Namespace","scope":["meta.namespace-block.cpp"],"settings":{"foreground":"#e0dec6"}},{"name":"C++ Language Primitive Storage","scope":["storage.type.language.primitive.cpp"],"settings":{"foreground":"#ff6a83"}},{"name":"C++ Preprocessor Macro","scope":["meta.preprocessor.macro.cpp"],"settings":{"foreground":"#d6deeb"}},{"name":"C++ Variable Parameter","scope":["variable.parameter"],"settings":{"foreground":"#ffcb8b"}},{"name":"Powershell Variables","scope":["variable.other.readwrite.powershell"],"settings":{"foreground":"#82aaff"}},{"name":"Powershell Function","scope":["support.function.powershell"],"settings":{"foreground":"#7fdbca"}},{"name":"ID Attribute Name in HTML","scope":["entity.other.attribute-name.id.html"],"settings":{"foreground":"#c5e478"}},{"name":"HTML Punctuation Definition Tag","scope":["punctuation.definition.tag.html"],"settings":{"foreground":"#6ae9f0"}},{"name":"HTML Doctype","scope":["meta.tag.sgml.doctype.html"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"JavaScript Classes","scope":["meta.class entity.name.type.class.js"],"settings":{"foreground":"#ffcb8b"}},{"name":"JavaScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.js"],"settings":{"foreground":"#82aaff"}},{"name":"JavaScript Terminator","scope":["terminator.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Meta Punctuation Definition","scope":["meta.js punctuation.definition.js"],"settings":{"foreground":"#d6deeb"}},{"name":"Entity Names in Code Documentations","scope":["entity.name.type.instance.jsdoc","entity.name.type.instance.phpdoc"],"settings":{"foreground":"#889fb2"}},{"name":"Other Variables in Code Documentations","scope":["variable.other.jsdoc","variable.other.phpdoc"],"settings":{"foreground":"#78ccf0"}},{"name":"JavaScript module imports and exports","scope":["variable.other.meta.import.js","meta.import.js variable.other","variable.other.meta.export.js","meta.export.js variable.other"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Variable Parameter Function","scope":["variable.parameter.function.js"],"settings":{"foreground":"#8b96ea"}},{"name":"JavaScript[React] Variable Other Object","scope":["variable.other.object.js","variable.other.object.jsx","variable.object.property.js","variable.object.property.jsx"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Variables","scope":["variable.js","variable.other.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Entity Name Type","scope":["entity.name.type.js","entity.name.type.module.js"],"settings":{"foreground":"#ffcb8b","fontStyle":""}},{"name":"JavaScript Support Classes","scope":["support.class.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JSON Property Names","scope":["support.type.property-name.json"],"settings":{"foreground":"#7fdbca"}},{"name":"JSON Support Constants","scope":["support.constant.json"],"settings":{"foreground":"#c5e478"}},{"name":"JSON Property values (string)","scope":["meta.structure.dictionary.value.json string.quoted.double"],"settings":{"foreground":"#c789d6"}},{"name":"Strings in JSON values","scope":["string.quoted.double.json punctuation.definition.string.json"],"settings":{"foreground":"#80cbc4"}},{"name":"Specific JSON Property values like null","scope":["meta.structure.dictionary.json meta.structure.dictionary.value constant.language"],"settings":{"foreground":"#ff6a83"}},{"name":"JavaScript Other Variable","scope":["variable.other.object.js"],"settings":{"foreground":"#7fdbca"}},{"name":"Ruby Variables","scope":["variable.other.ruby"],"settings":{"foreground":"#d6deeb"}},{"name":"Ruby Class","scope":["entity.name.type.class.ruby"],"settings":{"foreground":"#ecc48d"}},{"name":"Ruby Hashkeys","scope":["constant.language.symbol.hashkey.ruby"],"settings":{"foreground":"#7fdbca"}},{"name":"LESS Tag names","scope":["entity.name.tag.less"],"settings":{"foreground":"#7fdbca"}},{"name":"LESS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#ffeb95"}},{"name":"Attribute Name for LESS","scope":["meta.attribute-selector.less entity.other.attribute-name.attribute"],"settings":{"foreground":"#f78c6c"}},{"name":"Markdown Headings","scope":["markup.heading.markdown","markup.heading.setext.1.markdown","markup.heading.setext.2.markdown"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown Italics","scope":["markup.italic.markdown"],"settings":{"foreground":"#c792ea","fontStyle":"italic"}},{"name":"Markdown Bold","scope":["markup.bold.markdown"],"settings":{"foreground":"#c5e478","fontStyle":"bold"}},{"name":"Markdown Quote + others","scope":["markup.quote.markdown"],"settings":{"foreground":"#969bb7","fontStyle":""}},{"name":"Markdown Raw Code + others","scope":["markup.inline.raw.markdown"],"settings":{"foreground":"#80cbc4"}},{"name":"Markdown Links","scope":["markup.underline.link.markdown","markup.underline.link.image.markdown"],"settings":{"foreground":"#ff869a","fontStyle":"underline"}},{"name":"Markdown Link Title and Description","scope":["string.other.link.title.markdown","string.other.link.description.markdown"],"settings":{"foreground":"#d6deeb","fontStyle":"underline"}},{"name":"Markdown Punctuation","scope":["punctuation.definition.string.markdown","punctuation.definition.string.begin.markdown","punctuation.definition.string.end.markdown","meta.link.inline.markdown punctuation.definition.string"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown MetaData Punctuation","scope":["punctuation.definition.metadata.markdown"],"settings":{"foreground":"#7fdbca"}},{"name":"Markdown List Punctuation","scope":["beginning.punctuation.definition.list.markdown"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown Inline Raw String","scope":["markup.inline.raw.string.markdown"],"settings":{"foreground":"#c5e478"}},{"name":"PHP Variables","scope":["variable.other.php"],"settings":{"foreground":"#bec5d4"}},{"name":"Support Classes in PHP","scope":["support.class.php"],"settings":{"foreground":"#ffcb8b"}},{"name":"Punctuations in PHP function calls","scope":["meta.function-call.php punctuation"],"settings":{"foreground":"#d6deeb"}},{"name":"PHP Global Variables","scope":["variable.other.global.php"],"settings":{"foreground":"#c5e478"}},{"name":"Declaration Punctuation in PHP Global Variables","scope":["variable.other.global.php punctuation.definition.variable"],"settings":{"foreground":"#c5e478"}},{"name":"Language Constants in Python","scope":["constant.language.python"],"settings":{"foreground":"#ff6a83"}},{"name":"Python Function Parameter and Arguments","scope":["variable.parameter.function.python","meta.function-call.arguments.python"],"settings":{"foreground":"#82aaff"}},{"name":"Python Function Call","scope":["meta.function-call.python","meta.function-call.generic.python"],"settings":{"foreground":"#b2ccd6"}},{"name":"Punctuations in Python","scope":["punctuation.python"],"settings":{"foreground":"#d6deeb"}},{"name":"Decorator Functions in Python","scope":["entity.name.function.decorator.python"],"settings":{"foreground":"#c5e478"}},{"name":"Python Language Variable","scope":["source.python variable.language.special"],"settings":{"foreground":"#8eace3"}},{"name":"Python import control keyword","scope":["keyword.control"],"settings":{"foreground":"#c792ea"}},{"name":"SCSS Variable","scope":["variable.scss","variable.sass","variable.parameter.url.scss","variable.parameter.url.sass"],"settings":{"foreground":"#c5e478"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#82aaff"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#bec5d4"}},{"name":"Attribute Name for SASS","scope":["meta.attribute-selector.scss entity.other.attribute-name.attribute","meta.attribute-selector.sass entity.other.attribute-name.attribute"],"settings":{"foreground":"#f78c6c"}},{"name":"Tag names in SASS","scope":["entity.name.tag.scss","entity.name.tag.sass"],"settings":{"foreground":"#7fdbca"}},{"name":"SASS Keyword Other Unit","scope":["keyword.other.unit.scss","keyword.other.unit.sass"],"settings":{"foreground":"#ffeb95"}},{"name":"TypeScript[React] Variables and Object Properties","scope":["variable.other.readwrite.alias.ts","variable.other.readwrite.alias.tsx","variable.other.readwrite.ts","variable.other.readwrite.tsx","variable.other.object.ts","variable.other.object.tsx","variable.object.property.ts","variable.object.property.tsx","variable.other.ts","variable.other.tsx","variable.tsx","variable.ts"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript[React] Entity Name Types","scope":["entity.name.type.ts","entity.name.type.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript[React] Node Classes","scope":["support.class.node.ts","support.class.node.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"TypeScript[React] Entity Name Types as Parameters","scope":["meta.type.parameters.ts entity.name.type","meta.type.parameters.tsx entity.name.type"],"settings":{"foreground":"#889fb2"}},{"name":"TypeScript[React] Import/Export Punctuations","scope":["meta.import.ts punctuation.definition.block","meta.import.tsx punctuation.definition.block","meta.export.ts punctuation.definition.block","meta.export.tsx punctuation.definition.block"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.decorator punctuation.decorator.ts","meta.decorator punctuation.decorator.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.tag.js meta.jsx.children.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"YAML Entity Name Tags","scope":["entity.name.tag.yaml"],"settings":{"foreground":"#7fdbca"}},{"name":"JavaScript Variable Other ReadWrite","scope":["variable.other.readwrite.js","variable.parameter"],"settings":{"foreground":"#d7dbe0"}},{"name":"Support Class Component","scope":["support.class.component.js","support.class.component.tsx"],"settings":{"foreground":"#f78c6c","fontStyle":""}},{"name":"Text nested in React tags","scope":["meta.jsx.children","meta.jsx.children.js","meta.jsx.children.tsx"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript Classes","scope":["meta.class entity.name.type.class.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript Entity Name Type","scope":["entity.name.type.tsx","entity.name.type.module.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript Class Variable Keyword","scope":["meta.class.ts meta.var.expr.ts storage.type.ts","meta.class.tsx meta.var.expr.tsx storage.type.tsx"],"settings":{"foreground":"#c792ea"}},{"name":"TypeScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.ts","meta.method.declaration storage.type.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"normalize font style of certain components","scope":["meta.property-list.css meta.property-value.css variable.other.less","meta.property-list.scss variable.scss","meta.property-list.sass variable.sass","meta.brace","keyword.operator.operator","keyword.operator.or.regexp","keyword.operator.expression.in","keyword.operator.relational","keyword.operator.assignment","keyword.operator.comparison","keyword.operator.type","keyword.operator","keyword","punctuation.definintion.string","punctuation","variable.other.readwrite.js","storage.type","source.css","string.quoted"],"settings":{"fontStyle":""}}],"styleOverrides":{"frames":{"editorBackground":"var(--sl-color-gray-6)","terminalBackground":"var(--sl-color-gray-6)","editorActiveTabBackground":"var(--sl-color-gray-6)","terminalTitlebarDotsForeground":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","terminalTitlebarDotsOpacity":"0.75","inlineButtonForeground":"var(--sl-color-text)","frameBoxShadowCssValue":"none"},"textMarkers":{"markBackground":"#ffffff17","markBorderColor":"#ffffff40"}}},{"name":"Night Owl Light","type":"light","colors":{"focusBorder":"#93a1a1","foreground":"#403f53","disabledForeground":"#61616180","descriptionForeground":"#403f53","errorForeground":"#403f53","icon.foreground":"#424242","contrastActiveBorder":null,"contrastBorder":null,"textBlockQuote.background":"#7f7f7f1a","textBlockQuote.border":"#007acc80","textCodeBlock.background":"#dcdcdc66","textLink.activeForeground":"#006ab1","textLink.foreground":"#006ab1","textPreformat.foreground":"#a31515","textSeparator.foreground":"#0000002e","editor.background":"#f6f7f9","editor.foreground":"#403f53","editorLineNumber.foreground":"#90a7b2","editorLineNumber.activeForeground":"#403f53","editorActiveLineNumber.foreground":"#0b216f","editor.selectionBackground":"#e0e0e0","editor.inactiveSelectionBackground":"#e0e0e080","editor.selectionHighlightBackground":"#339cec33","editorError.foreground":"#e64d49","editorWarning.foreground":"#daaa01","editorInfo.foreground":"#1a85ff","editorHint.foreground":"#6c6c6c","problemsErrorIcon.foreground":"#e64d49","problemsWarningIcon.foreground":"#daaa01","problemsInfoIcon.foreground":"#1a85ff","editor.findMatchBackground":"#93a1a16c","editor.findMatchHighlightBackground":"#93a1a16c","editor.findRangeHighlightBackground":"#7497a633","editorLink.activeForeground":"#0000ff","editorLightBulb.foreground":"#ddb100","editorLightBulbAutoFix.foreground":"#007acc","diffEditor.insertedTextBackground":"#9ccc2c40","diffEditor.insertedTextBorder":null,"diffEditor.removedTextBackground":"#ff000033","diffEditor.removedTextBorder":null,"diffEditor.insertedLineBackground":"#9bb95533","diffEditor.removedLineBackground":"#ff000033","editorStickyScroll.background":"#fbfbfb","editorStickyScrollHover.background":"#f0f0f0","editorInlayHint.background":"#2aa29899","editorInlayHint.foreground":"#f0f0f0","editorInlayHint.typeBackground":"#2aa29899","editorInlayHint.typeForeground":"#f0f0f0","editorInlayHint.parameterBackground":"#2aa29899","editorInlayHint.parameterForeground":"#f0f0f0","editorPane.background":"#fbfbfb","editorGroup.emptyBackground":null,"editorGroup.focusedEmptyBorder":null,"editorGroupHeader.tabsBackground":"var(--sl-color-gray-6)","editorGroupHeader.tabsBorder":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","editorGroupHeader.noTabsBackground":"#f0f0f0","editorGroupHeader.border":null,"editorGroup.border":"#f0f0f0","editorGroup.dropBackground":"#2677cb2d","editorGroup.dropIntoPromptForeground":"#403f53","editorGroup.dropIntoPromptBackground":"#f0f0f0","editorGroup.dropIntoPromptBorder":null,"sideBySideEditor.horizontalBorder":"#f0f0f0","sideBySideEditor.verticalBorder":"#f0f0f0","scrollbar.shadow":"#cccccc","scrollbarSlider.background":"#0000001a","scrollbarSlider.hoverBackground":"#00000055","scrollbarSlider.activeBackground":"#00000099","panel.background":"#f0f0f0","panel.border":"#d9d9d9","panelTitle.activeBorder":"#424242","panelTitle.activeForeground":"#424242","panelTitle.inactiveForeground":"#424242bf","panelSectionHeader.background":"#80808051","terminal.background":"#f6f6f6","widget.shadow":"#d9d9d9","editorWidget.background":"#f0f0f0","editorWidget.foreground":"#403f53","editorWidget.border":"#d9d9d9","quickInput.background":"#f0f0f0","quickInput.foreground":"#403f53","quickInputTitle.background":"#0000000f","pickerGroup.foreground":"#403f53","pickerGroup.border":"#d9d9d9","editor.hoverHighlightBackground":"#339cec33","editorHoverWidget.background":"#f0f0f0","editorHoverWidget.foreground":"#403f53","editorHoverWidget.border":"#d9d9d9","editorHoverWidget.statusBarBackground":"#e4e4e4","titleBar.activeBackground":"var(--sl-color-gray-6)","titleBar.activeForeground":"var(--sl-color-text)","titleBar.inactiveBackground":"#f0f0f099","titleBar.inactiveForeground":"#33333399","titleBar.border":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","toolbar.hoverBackground":"#b8b8b850","toolbar.activeBackground":"#a6a6a650","tab.activeBackground":"#f6f6f6","tab.unfocusedActiveBackground":"#f6f6f6","tab.inactiveBackground":"#f0f0f0","tab.unfocusedInactiveBackground":"#f0f0f0","tab.activeForeground":"var(--sl-color-text)","tab.inactiveForeground":"#403f53","tab.unfocusedActiveForeground":"#403f53b3","tab.unfocusedInactiveForeground":"#403f5380","tab.hoverBackground":null,"tab.unfocusedHoverBackground":null,"tab.hoverForeground":null,"tab.unfocusedHoverForeground":null,"tab.border":"#f0f0f0","tab.lastPinnedBorder":"#a9a9a9","tab.activeBorder":"transparent","tab.unfocusedActiveBorder":null,"tab.activeBorderTop":"var(--sl-color-accent)","tab.unfocusedActiveBorderTop":null,"tab.hoverBorder":null,"tab.unfocusedHoverBorder":null,"tab.activeModifiedBorder":"#2aa298","tab.inactiveModifiedBorder":"#93a1a1","tab.unfocusedActiveModifiedBorder":"#93a1a1","tab.unfocusedInactiveModifiedBorder":"#93a1a1","badge.background":"#2aa298","badge.foreground":"#f0f0f0","button.background":"#2aa298","button.foreground":"#f0f0f0","button.border":null,"button.separator":"#f0f0f066","button.hoverBackground":"#22827a","button.secondaryBackground":"#5f6a79","button.secondaryForeground":"#ffffff","button.secondaryHoverBackground":"#4c5561","dropdown.background":"#f0f0f0","dropdown.foreground":"#403f53","dropdown.border":"#d9d9d9","list.activeSelectionBackground":"#d3e8f8","list.activeSelectionForeground":"#403f53","tree.indentGuidesStroke":"#a9a9a9","input.background":"#f0f0f0","input.foreground":"#403f53","input.placeholderForeground":"#93a1a1","inputOption.activeBorder":"#2aa298","inputOption.hoverBackground":"#b8b8b850","inputOption.activeBackground":"#93a1a133","inputOption.activeForeground":"#000000","inputValidation.infoBackground":"#f0f0f0","inputValidation.infoBorder":"#d0d0d0","inputValidation.warningBackground":"#daaa01","inputValidation.warningBorder":"#e0af02","inputValidation.errorBackground":"#f76e6e","inputValidation.errorBorder":"#de3d3b","keybindingLabel.background":"#dddddd66","keybindingLabel.foreground":"#555555","keybindingLabel.border":"#cccccc66","keybindingLabel.bottomBorder":"#bbbbbb66","menu.foreground":"#403f53","menu.background":"#f0f0f0","menu.selectionForeground":"#403f53","menu.selectionBackground":"#d3e8f8","menu.separatorBackground":"#d4d4d4","editor.snippetTabstopHighlightBackground":"#0a326433","editor.snippetFinalTabstopHighlightBorder":"#0a326480","terminal.ansiBlack":"#403f53","terminal.ansiRed":"#de3d3b","terminal.ansiGreen":"#08916a","terminal.ansiYellow":"#e0af02","terminal.ansiBlue":"#288ed7","terminal.ansiMagenta":"#d6438a","terminal.ansiCyan":"#2aa298","terminal.ansiWhite":"#f0f0f0","terminal.ansiBrightBlack":"#403f53","terminal.ansiBrightRed":"#de3d3b","terminal.ansiBrightGreen":"#08916a","terminal.ansiBrightYellow":"#daaa01","terminal.ansiBrightBlue":"#288ed7","terminal.ansiBrightMagenta":"#d6438a","terminal.ansiBrightCyan":"#2aa298","terminal.ansiBrightWhite":"#f0f0f0","selection.background":"#7a8181ad","notifications.background":"#f0f0f0","notifications.foreground":"#403f53","notificationLink.foreground":"#994cc3","notifications.border":"#cccccc","notificationCenter.border":"#cccccc","notificationToast.border":"#cccccc","notificationCenterHeader.foreground":"#403f53","notificationCenterHeader.background":"#f0f0f0","input.border":"#d9d9d9","progressBar.background":"#2aa298","list.inactiveSelectionBackground":"#e0e7ea","list.inactiveSelectionForeground":"#403f53","list.focusBackground":"#d3e8f8","list.hoverBackground":"#d3e8f8","list.focusForeground":"#403f53","list.hoverForeground":"#403f53","list.highlightForeground":"#403f53","list.errorForeground":"#e64d49","list.warningForeground":"#daaa01","activityBar.background":"#f0f0f0","activityBar.foreground":"#403f53","activityBar.dropBackground":"#d0d0d0","activityBarBadge.background":"#403f53","activityBarBadge.foreground":"#f0f0f0","activityBar.border":"#f0f0f0","sideBar.background":"#f0f0f0","sideBar.foreground":"#403f53","sideBarTitle.foreground":"#403f53","sideBar.border":"#f0f0f0","editorGroup.background":"#f6f6f6","editorCursor.foreground":"#90a7b2","editor.wordHighlightBackground":"#339cec33","editor.wordHighlightStrongBackground":"#007dd659","editor.lineHighlightBackground":"#f0f0f0","editor.rangeHighlightBackground":"#7497a633","editorWhitespace.foreground":"#d9d9d9","editorIndentGuide.background":"#d9d9d9","editorCodeLens.foreground":"#403f53","editorBracketMatch.background":"#d3e8f8","editorBracketMatch.border":"#2aa298","editorError.border":"#fbfbfb","editorWarning.border":"#daaa01","editorGutter.addedBackground":"#49d0c5","editorGutter.modifiedBackground":"#6fbef6","editorGutter.deletedBackground":"#f76e6e","editorRuler.foreground":"#d9d9d9","editorOverviewRuler.errorForeground":"#e64d49","editorOverviewRuler.warningForeground":"#daaa01","editorSuggestWidget.background":"#f0f0f0","editorSuggestWidget.foreground":"#403f53","editorSuggestWidget.highlightForeground":"#403f53","editorSuggestWidget.selectedBackground":"#d3e8f8","editorSuggestWidget.border":"#d9d9d9","debugExceptionWidget.background":"#f0f0f0","debugExceptionWidget.border":"#d9d9d9","editorMarkerNavigation.background":"#d0d0d0","editorMarkerNavigationError.background":"#f76e6e","editorMarkerNavigationWarning.background":"#daaa01","debugToolBar.background":"#f0f0f0","extensionButton.prominentBackground":"#2aa298","extensionButton.prominentForeground":"#f0f0f0","statusBar.background":"#f0f0f0","statusBar.border":"#f0f0f0","statusBar.debuggingBackground":"#f0f0f0","statusBar.debuggingForeground":"#403f53","statusBar.foreground":"#403f53","statusBar.noFolderBackground":"#f0f0f0","statusBar.noFolderForeground":"#403f53","peekView.border":"#d9d9d9","peekViewEditor.background":"#f6f6f6","peekViewEditorGutter.background":"#f6f6f6","peekViewEditor.matchHighlightBackground":"#49d0c5","peekViewResult.background":"#f0f0f0","peekViewResult.fileForeground":"#403f53","peekViewResult.lineForeground":"#403f53","peekViewResult.matchHighlightBackground":"#49d0c5","peekViewResult.selectionBackground":"#e0e7ea","peekViewResult.selectionForeground":"#403f53","peekViewTitle.background":"#f0f0f0","peekViewTitleLabel.foreground":"#403f53","peekViewTitleDescription.foreground":"#403f53","terminal.foreground":"#403f53"},"fg":"#403f53","bg":"#f6f7f9","semanticHighlighting":false,"settings":[{"name":"Changed","scope":["markup.changed","meta.diff.header.git","meta.diff.header.from-file","meta.diff.header.to-file"],"settings":{"foreground":"#556484"}},{"name":"Deleted","scope":["markup.deleted.diff"],"settings":{"foreground":"#ae3c3afd"}},{"name":"Inserted","scope":["markup.inserted.diff"],"settings":{"foreground":"#3b61b0"}},{"name":"Global settings","settings":{"background":"#011627","foreground":"#403f53"}},{"name":"Comment","scope":["comment"],"settings":{"foreground":"#5f636f"}},{"name":"String","scope":["string"],"settings":{"foreground":"#3b61b0"}},{"name":"String Quoted","scope":["string.quoted","variable.other.readwrite.js"],"settings":{"foreground":"#984e4d"}},{"name":"Support Constant Math","scope":["support.constant.math"],"settings":{"foreground":"#3b61b0"}},{"name":"Number","scope":["constant.numeric","constant.character.numeric"],"settings":{"foreground":"#aa0982","fontStyle":""}},{"name":"Built-in constant","scope":["constant.language","punctuation.definition.constant","variable.other.constant"],"settings":{"foreground":"#3b61b0"}},{"name":"User-defined constant","scope":["constant.character","constant.other"],"settings":{"foreground":"#3b61b0"}},{"name":"Constant Character Escape","scope":["constant.character.escape"],"settings":{"foreground":"#aa0982"}},{"name":"RegExp String","scope":["string.regexp","string.regexp keyword.other"],"settings":{"foreground":"#3a688f"}},{"name":"Comma in functions","scope":["meta.function punctuation.separator.comma"],"settings":{"foreground":"#4d667b"}},{"name":"Variable","scope":["variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Keyword","scope":["punctuation.accessor","keyword"],"settings":{"foreground":"#8844ae"}},{"name":"Storage","scope":["storage","meta.var.expr","meta.class meta.method.declaration meta.var.expr storage.type.js","storage.type.property.js","storage.type.property.ts","storage.type.property.tsx"],"settings":{"foreground":"#8844ae"}},{"name":"Storage type","scope":["storage.type"],"settings":{"foreground":"#8844ae"}},{"name":"Storage type","scope":["storage.type.function.arrow.js"],"settings":{"fontStyle":""}},{"name":"Class name","scope":["entity.name.class","meta.class entity.name.type.class"],"settings":{"foreground":"#111111"}},{"name":"Inherited class","scope":["entity.other.inherited-class"],"settings":{"foreground":"#3b61b0"}},{"name":"Function name","scope":["entity.name.function"],"settings":{"foreground":"#8844ae"}},{"name":"Meta Tag","scope":["punctuation.definition.tag","meta.tag"],"settings":{"foreground":"#8844ae"}},{"name":"HTML Tag names","scope":["entity.name.tag","meta.tag.other.html","meta.tag.other.js","meta.tag.other.tsx","entity.name.tag.tsx","entity.name.tag.js","entity.name.tag","meta.tag.js","meta.tag.tsx","meta.tag.html"],"settings":{"foreground":"#8844ae"}},{"name":"Tag attribute","scope":["entity.other.attribute-name"],"settings":{"foreground":"#3b61b0"}},{"name":"Entity Name Tag Custom","scope":["entity.name.tag.custom"],"settings":{"foreground":"#3b61b0"}},{"name":"Library (function & constant)","scope":["support.function","support.constant"],"settings":{"foreground":"#3b61b0"}},{"name":"Support Constant Property Value meta","scope":["support.constant.meta.property-value"],"settings":{"foreground":"#096e72"}},{"name":"Library class/type","scope":["support.type","support.class"],"settings":{"foreground":"#3b61b0"}},{"name":"Support Variable DOM","scope":["support.variable.dom"],"settings":{"foreground":"#3b61b0"}},{"name":"Invalid","scope":["invalid"],"settings":{"foreground":"#bb2060"}},{"name":"Invalid deprecated","scope":["invalid.deprecated"],"settings":{"foreground":"#b23834"}},{"name":"Keyword Operator","scope":["keyword.operator"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Keyword Operator Relational","scope":["keyword.operator.relational"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Assignment","scope":["keyword.operator.assignment"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Arithmetic","scope":["keyword.operator.arithmetic"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Bitwise","scope":["keyword.operator.bitwise"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Increment","scope":["keyword.operator.increment"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Ternary","scope":["keyword.operator.ternary"],"settings":{"foreground":"#8844ae"}},{"name":"Double-Slashed Comment","scope":["comment.line.double-slash"],"settings":{"foreground":"#5d6376"}},{"name":"Object","scope":["object"],"settings":{"foreground":"#58656a"}},{"name":"Null","scope":["constant.language.null"],"settings":{"foreground":"#a24848"}},{"name":"Meta Brace","scope":["meta.brace"],"settings":{"foreground":"#403f53"}},{"name":"Meta Delimiter Period","scope":["meta.delimiter.period"],"settings":{"foreground":"#8844ae"}},{"name":"Punctuation Definition String","scope":["punctuation.definition.string"],"settings":{"foreground":"#111111"}},{"name":"Punctuation Definition String Markdown","scope":["punctuation.definition.string.begin.markdown"],"settings":{"foreground":"#a24848"}},{"name":"Boolean","scope":["constant.language.boolean"],"settings":{"foreground":"#a24848"}},{"name":"Object Comma","scope":["object.comma"],"settings":{"foreground":"#646464"}},{"name":"Variable Parameter Function","scope":["variable.parameter.function"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Support Type Property Name & entity name tags","scope":["support.type.vendor.property-name","support.constant.vendor.property-value","support.type.property-name","meta.property-list entity.name.tag"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Entity Name tag reference in stylesheets","scope":["meta.property-list entity.name.tag.reference"],"settings":{"foreground":"#286d70"}},{"name":"Constant Other Color RGB Value Punctuation Definition Constant","scope":["constant.other.color.rgb-value punctuation.definition.constant"],"settings":{"foreground":"#aa0982"}},{"name":"Constant Other Color","scope":["constant.other.color"],"settings":{"foreground":"#aa0982"}},{"name":"Keyword Other Unit","scope":["keyword.other.unit"],"settings":{"foreground":"#aa0982"}},{"name":"Meta Selector","scope":["meta.selector"],"settings":{"foreground":"#8844ae"}},{"name":"Entity Other Attribute Name Id","scope":["entity.other.attribute-name.id"],"settings":{"foreground":"#aa0982"}},{"name":"Meta Property Name","scope":["meta.property-name"],"settings":{"foreground":"#096e72"}},{"name":"Doctypes","scope":["entity.name.tag.doctype","meta.tag.sgml.doctype"],"settings":{"foreground":"#8844ae"}},{"name":"Punctuation Definition Parameters","scope":["punctuation.definition.parameters"],"settings":{"foreground":"#111111"}},{"name":"Keyword Control Operator","scope":["keyword.control.operator"],"settings":{"foreground":"#096e72"}},{"name":"Keyword Operator Logical","scope":["keyword.operator.logical"],"settings":{"foreground":"#8844ae","fontStyle":""}},{"name":"Variable Instances","scope":["variable.instance","variable.other.instance","variable.readwrite.instance","variable.other.readwrite.instance","variable.other.property"],"settings":{"foreground":"#096e72"}},{"name":"Variable Property Other object property","scope":["variable.other.object.property"],"settings":{"foreground":"#111111"}},{"name":"Variable Property Other object","scope":["variable.other.object.js"],"settings":{"fontStyle":""}},{"name":"Entity Name Function","scope":["entity.name.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby","scope":["keyword.operator.comparison","keyword.control.flow.js","keyword.control.flow.ts","keyword.control.flow.tsx","keyword.control.ruby","keyword.control.module.ruby","keyword.control.class.ruby","keyword.control.def.ruby","keyword.control.loop.js","keyword.control.loop.ts","keyword.control.import.js","keyword.control.import.ts","keyword.control.import.tsx","keyword.control.from.js","keyword.control.from.ts","keyword.control.from.tsx","keyword.operator.instanceof.js","keyword.operator.expression.instanceof.ts","keyword.operator.expression.instanceof.tsx"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Control Conditional","scope":["keyword.control.conditional.js","keyword.control.conditional.ts","keyword.control.switch.js","keyword.control.switch.ts"],"settings":{"foreground":"#8844ae","fontStyle":""}},{"name":"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords","scope":["support.constant","keyword.other.special-method","keyword.other.new","keyword.other.debugger","keyword.control"],"settings":{"foreground":"#096e72"}},{"name":"Support Function","scope":["support.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Invalid Broken","scope":["invalid.broken"],"settings":{"foreground":"#aa0982"}},{"name":"Invalid Unimplemented","scope":["invalid.unimplemented"],"settings":{"foreground":"#486e26"}},{"name":"Invalid Illegal","scope":["invalid.illegal"],"settings":{"foreground":"#984e4d"}},{"name":"Language Variable","scope":["variable.language"],"settings":{"foreground":"#096e72"}},{"name":"Support Variable Property","scope":["support.variable.property"],"settings":{"foreground":"#096e72"}},{"name":"Variable Function","scope":["variable.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Variable Interpolation","scope":["variable.interpolation"],"settings":{"foreground":"#a64348"}},{"name":"Meta Function Call","scope":["meta.function-call"],"settings":{"foreground":"#3b61b0"}},{"name":"Punctuation Section Embedded","scope":["punctuation.section.embedded"],"settings":{"foreground":"#b23834"}},{"name":"Punctuation Tweaks","scope":["punctuation.terminator.expression","punctuation.definition.arguments","punctuation.definition.array","punctuation.section.array","meta.array"],"settings":{"foreground":"#403f53"}},{"name":"More Punctuation Tweaks","scope":["punctuation.definition.list.begin","punctuation.definition.list.end","punctuation.separator.arguments","punctuation.definition.list"],"settings":{"foreground":"#111111"}},{"name":"Template Strings","scope":["string.template meta.template.expression"],"settings":{"foreground":"#b23834"}},{"name":"Backtics(``) in Template Strings","scope":["string.template punctuation.definition.string"],"settings":{"foreground":"#403f53"}},{"name":"Italics","scope":["italic"],"settings":{"foreground":"#8844ae","fontStyle":"italic"}},{"name":"Bold","scope":["bold"],"settings":{"foreground":"#3b61b0","fontStyle":"bold"}},{"name":"Quote","scope":["quote"],"settings":{"foreground":"#5c6285"}},{"name":"Raw Code","scope":["raw"],"settings":{"foreground":"#096e72"}},{"name":"CoffeScript Variable Assignment","scope":["variable.assignment.coffee"],"settings":{"foreground":"#186e73"}},{"name":"CoffeScript Parameter Function","scope":["variable.parameter.function.coffee"],"settings":{"foreground":"#403f53"}},{"name":"CoffeeScript Assignments","scope":["variable.assignment.coffee"],"settings":{"foreground":"#096e72"}},{"name":"C# Readwrite Variables","scope":["variable.other.readwrite.cs"],"settings":{"foreground":"#403f53"}},{"name":"C# Classes & Storage types","scope":["entity.name.type.class.cs","storage.type.cs"],"settings":{"foreground":"#3b61b0"}},{"name":"C# Namespaces","scope":["entity.name.type.namespace.cs"],"settings":{"foreground":"#096e72"}},{"name":"Tag names in Stylesheets","scope":["entity.name.tag.css","entity.name.tag.less","entity.name.tag.custom.css","support.constant.property-value.css"],"settings":{"foreground":"#984e4d","fontStyle":""}},{"name":"Wildcard(*) selector in Stylesheets","scope":["entity.name.tag.wildcard.css","entity.name.tag.wildcard.less","entity.name.tag.wildcard.scss","entity.name.tag.wildcard.sass"],"settings":{"foreground":"#096e72"}},{"name":"CSS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#3b61b0"}},{"name":"Attribute Name for CSS","scope":["meta.attribute-selector.css entity.other.attribute-name.attribute","variable.other.readwrite.js"],"settings":{"foreground":"#aa0982"}},{"name":"Elixir Classes","scope":["source.elixir support.type.elixir","source.elixir meta.module.elixir entity.name.class.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Functions","scope":["source.elixir entity.name.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Constants","scope":["source.elixir constant.other.symbol.elixir","source.elixir constant.other.keywords.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir String Punctuations","scope":["source.elixir punctuation.definition.string"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir","scope":["source.elixir variable.other.readwrite.module.elixir","source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Binary Punctuations","scope":["source.elixir .punctuation.binary.elixir"],"settings":{"foreground":"#8844ae"}},{"name":"Closure Constant Keyword","scope":["constant.keyword.clojure"],"settings":{"foreground":"#096e72"}},{"name":"Go Function Calls","scope":["source.go meta.function-call.go"],"settings":{"foreground":"#096e72"}},{"name":"Go Keywords","scope":["source.go keyword.package.go","source.go keyword.import.go","source.go keyword.function.go","source.go keyword.type.go","source.go keyword.struct.go","source.go keyword.interface.go","source.go keyword.const.go","source.go keyword.var.go","source.go keyword.map.go","source.go keyword.channel.go","source.go keyword.control.go"],"settings":{"foreground":"#8844ae"}},{"name":"Go Constants e.g. nil, string format (%s, %d, etc.)","scope":["source.go constant.language.go","source.go constant.other.placeholder.go"],"settings":{"foreground":"#a24848"}},{"name":"C++ Functions","scope":["entity.name.function.preprocessor.cpp","entity.scope.name.cpp"],"settings":{"foreground":"#096e72"}},{"name":"C++ Meta Namespace","scope":["meta.namespace-block.cpp"],"settings":{"foreground":"#111111"}},{"name":"C++ Language Primitive Storage","scope":["storage.type.language.primitive.cpp"],"settings":{"foreground":"#a24848"}},{"name":"C++ Preprocessor Macro","scope":["meta.preprocessor.macro.cpp"],"settings":{"foreground":"#403f53"}},{"name":"C++ Variable Parameter","scope":["variable.parameter"],"settings":{"foreground":"#111111"}},{"name":"Powershell Variables","scope":["variable.other.readwrite.powershell"],"settings":{"foreground":"#3b61b0"}},{"name":"Powershell Function","scope":["support.function.powershell"],"settings":{"foreground":"#096e72"}},{"name":"ID Attribute Name in HTML","scope":["entity.other.attribute-name.id.html"],"settings":{"foreground":"#3b61b0"}},{"name":"HTML Punctuation Definition Tag","scope":["punctuation.definition.tag.html"],"settings":{"foreground":"#8844ae"}},{"name":"HTML Doctype","scope":["meta.tag.sgml.doctype.html"],"settings":{"foreground":"#8844ae"}},{"name":"JavaScript Classes","scope":["meta.class entity.name.type.class.js"],"settings":{"foreground":"#111111"}},{"name":"JavaScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.js"],"settings":{"foreground":"#3b61b0"}},{"name":"JavaScript Terminator","scope":["terminator.js"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Meta Punctuation Definition","scope":["meta.js punctuation.definition.js"],"settings":{"foreground":"#403f53"}},{"name":"Entity Names in Code Documentations","scope":["entity.name.type.instance.jsdoc","entity.name.type.instance.phpdoc"],"settings":{"foreground":"#4d667b"}},{"name":"Other Variables in Code Documentations","scope":["variable.other.jsdoc","variable.other.phpdoc"],"settings":{"foreground":"#3e697c"}},{"name":"JavaScript module imports and exports","scope":["variable.other.meta.import.js","meta.import.js variable.other","variable.other.meta.export.js","meta.export.js variable.other"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Variable Parameter Function","scope":["variable.parameter.function.js"],"settings":{"foreground":"#555ea2"}},{"name":"JavaScript[React] Variable Other Object","scope":["variable.other.object.js","variable.other.object.jsx","variable.object.property.js","variable.object.property.jsx"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Variables","scope":["variable.js","variable.other.js"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Entity Name Type","scope":["entity.name.type.js","entity.name.type.module.js"],"settings":{"foreground":"#111111","fontStyle":""}},{"name":"JavaScript Support Classes","scope":["support.class.js"],"settings":{"foreground":"#403f53"}},{"name":"JSON Property Names","scope":["support.type.property-name.json"],"settings":{"foreground":"#096e72"}},{"name":"JSON Support Constants","scope":["support.constant.json"],"settings":{"foreground":"#3b61b0"}},{"name":"JSON Property values (string)","scope":["meta.structure.dictionary.value.json string.quoted.double"],"settings":{"foreground":"#7c5686"}},{"name":"Strings in JSON values","scope":["string.quoted.double.json punctuation.definition.string.json"],"settings":{"foreground":"#096e72"}},{"name":"Specific JSON Property values like null","scope":["meta.structure.dictionary.json meta.structure.dictionary.value constant.language"],"settings":{"foreground":"#a24848"}},{"name":"JavaScript Other Variable","scope":["variable.other.object.js"],"settings":{"foreground":"#096e72"}},{"name":"Ruby Variables","scope":["variable.other.ruby"],"settings":{"foreground":"#403f53"}},{"name":"Ruby Class","scope":["entity.name.type.class.ruby"],"settings":{"foreground":"#984e4d"}},{"name":"Ruby Hashkeys","scope":["constant.language.symbol.hashkey.ruby"],"settings":{"foreground":"#096e72"}},{"name":"Ruby Symbols","scope":["constant.language.symbol.ruby"],"settings":{"foreground":"#096e72"}},{"name":"LESS Tag names","scope":["entity.name.tag.less"],"settings":{"foreground":"#8844ae"}},{"name":"LESS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#096e72"}},{"name":"Attribute Name for LESS","scope":["meta.attribute-selector.less entity.other.attribute-name.attribute"],"settings":{"foreground":"#aa0982"}},{"name":"Markdown Headings","scope":["markup.heading.markdown","markup.heading.setext.1.markdown","markup.heading.setext.2.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown Italics","scope":["markup.italic.markdown"],"settings":{"foreground":"#8844ae","fontStyle":"italic"}},{"name":"Markdown Bold","scope":["markup.bold.markdown"],"settings":{"foreground":"#3b61b0","fontStyle":"bold"}},{"name":"Markdown Quote + others","scope":["markup.quote.markdown"],"settings":{"foreground":"#5c6285"}},{"name":"Markdown Raw Code + others","scope":["markup.inline.raw.markdown"],"settings":{"foreground":"#096e72"}},{"name":"Markdown Links","scope":["markup.underline.link.markdown","markup.underline.link.image.markdown"],"settings":{"foreground":"#954f5a","fontStyle":"underline"}},{"name":"Markdown Link Title and Description","scope":["string.other.link.title.markdown","string.other.link.description.markdown"],"settings":{"foreground":"#403f53","fontStyle":"underline"}},{"name":"Markdown Punctuation","scope":["punctuation.definition.string.markdown","punctuation.definition.string.begin.markdown","punctuation.definition.string.end.markdown","meta.link.inline.markdown punctuation.definition.string"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown MetaData Punctuation","scope":["punctuation.definition.metadata.markdown"],"settings":{"foreground":"#096e72"}},{"name":"Markdown List Punctuation","scope":["beginning.punctuation.definition.list.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown Inline Raw String","scope":["markup.inline.raw.string.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"PHP Variables","scope":["variable.other.php","variable.other.property.php"],"settings":{"foreground":"#111111"}},{"name":"Support Classes in PHP","scope":["support.class.php"],"settings":{"foreground":"#111111"}},{"name":"Punctuations in PHP function calls","scope":["meta.function-call.php punctuation"],"settings":{"foreground":"#403f53"}},{"name":"PHP Global Variables","scope":["variable.other.global.php"],"settings":{"foreground":"#3b61b0"}},{"name":"Declaration Punctuation in PHP Global Variables","scope":["variable.other.global.php punctuation.definition.variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Language Constants in Python","scope":["constant.language.python"],"settings":{"foreground":"#a24848"}},{"name":"Python Function Parameter and Arguments","scope":["variable.parameter.function.python","meta.function-call.arguments.python"],"settings":{"foreground":"#3b61b0"}},{"name":"Python Function Call","scope":["meta.function-call.python","meta.function-call.generic.python"],"settings":{"foreground":"#096e72"}},{"name":"Punctuations in Python","scope":["punctuation.python"],"settings":{"foreground":"#403f53"}},{"name":"Decorator Functions in Python","scope":["entity.name.function.decorator.python"],"settings":{"foreground":"#3b61b0"}},{"name":"Python Language Variable","scope":["source.python variable.language.special"],"settings":{"foreground":"#aa0982"}},{"name":"Python import control keyword","scope":["keyword.control"],"settings":{"foreground":"#8844ae"}},{"name":"SCSS Variable","scope":["variable.scss","variable.sass","variable.parameter.url.scss","variable.parameter.url.sass"],"settings":{"foreground":"#3b61b0"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#111111"}},{"name":"Attribute Name for SASS","scope":["meta.attribute-selector.scss entity.other.attribute-name.attribute","meta.attribute-selector.sass entity.other.attribute-name.attribute"],"settings":{"foreground":"#aa0982"}},{"name":"Tag names in SASS","scope":["entity.name.tag.scss","entity.name.tag.sass"],"settings":{"foreground":"#096e72"}},{"name":"SASS Keyword Other Unit","scope":["keyword.other.unit.scss","keyword.other.unit.sass"],"settings":{"foreground":"#8844ae"}},{"name":"TypeScript[React] Variables and Object Properties","scope":["variable.other.readwrite.alias.ts","variable.other.readwrite.alias.tsx","variable.other.readwrite.ts","variable.other.readwrite.tsx","variable.other.object.ts","variable.other.object.tsx","variable.object.property.ts","variable.object.property.tsx","variable.other.ts","variable.other.tsx","variable.tsx","variable.ts"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript[React] Entity Name Types","scope":["entity.name.type.ts","entity.name.type.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript[React] Node Classes","scope":["support.class.node.ts","support.class.node.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"TypeScript[React] Entity Name Types as Parameters","scope":["meta.type.parameters.ts entity.name.type","meta.type.parameters.tsx entity.name.type"],"settings":{"foreground":"#4d667b"}},{"name":"TypeScript[React] Import/Export Punctuations","scope":["meta.import.ts punctuation.definition.block","meta.import.tsx punctuation.definition.block","meta.export.ts punctuation.definition.block","meta.export.tsx punctuation.definition.block"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.decorator punctuation.decorator.ts","meta.decorator punctuation.decorator.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.tag.js meta.jsx.children.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"YAML Entity Name Tags","scope":["entity.name.tag.yaml"],"settings":{"foreground":"#111111"}},{"name":"JavaScript Variable Other ReadWrite","scope":["variable.other.readwrite.js","variable.parameter"],"settings":{"foreground":"#403f53"}},{"name":"Support Class Component","scope":["support.class.component.js","support.class.component.tsx"],"settings":{"foreground":"#aa0982","fontStyle":""}},{"name":"Text nested in React tags","scope":["meta.jsx.children","meta.jsx.children.js","meta.jsx.children.tsx"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript Classes","scope":["meta.class entity.name.type.class.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript Entity Name Type","scope":["entity.name.type.tsx","entity.name.type.module.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript Class Variable Keyword","scope":["meta.class.ts meta.var.expr.ts storage.type.ts","meta.class.tsx meta.var.expr.tsx storage.type.tsx"],"settings":{"foreground":"#76578b"}},{"name":"TypeScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.ts","meta.method.declaration storage.type.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"normalize font style of certain components","scope":["meta.property-list.css meta.property-value.css variable.other.less","meta.property-list.scss variable.scss","meta.property-list.sass variable.sass","meta.brace","keyword.operator.operator","keyword.operator.or.regexp","keyword.operator.expression.in","keyword.operator.relational","keyword.operator.assignment","keyword.operator.comparison","keyword.operator.type","keyword.operator","keyword","punctuation.definintion.string","punctuation","variable.other.readwrite.js","storage.type","source.css","string.quoted"],"settings":{"fontStyle":""}}],"styleOverrides":{"frames":{"editorBackground":"var(--sl-color-gray-7)","terminalBackground":"var(--sl-color-gray-7)","editorActiveTabBackground":"var(--sl-color-gray-7)","terminalTitlebarDotsForeground":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","terminalTitlebarDotsOpacity":"0.75","inlineButtonForeground":"var(--sl-color-text)","frameBoxShadowCssValue":"none"},"textMarkers":{"markBackground":"#0000001a","markBorderColor":"#00000055"}}}],"defaultLocale":"en","styleOverrides":{"borderRadius":"0px","borderWidth":"1px","codePaddingBlock":"0.75rem","codePaddingInline":"1rem","codeFontFamily":"var(--__sl-font-mono)","codeFontSize":"var(--sl-text-code)","codeLineHeight":"var(--sl-line-height)","uiFontFamily":"var(--__sl-font)","textMarkers":{"lineDiffIndicatorMarginLeft":"0.25rem","defaultChroma":"45","backgroundOpacity":"60%"}},"plugins":[{"name":"Starlight Plugin","hooks":{}},{"name":"astro-expressive-code","hooks":{}}]}]],"remarkRehype":{},"gfm":true,"smartypants":true},"security":{"checkOrigin":true},"env":{"schema":{},"validateSecrets":false},"experimental":{"clientPrerender":false,"contentIntellisense":false,"responsiveImages":false,"headingIdCompat":false,"preserveScriptOrder":false},"legacy":{"collections":false},"session":{"driver":"fs-lite","options":{"base":"/home/rutra/Documentos/CODE/PAP/r2d2-astro/node_modules/.astro/sessions"}},"prefetch":{"prefetchAll":true},"i18n":{"defaultLocale":"en","locales":["en"],"routing":{"prefixDefaultLocale":false,"redirectToDefaultLocale":false,"fallbackType":"redirect"}}}', "docs", ["Map", 11, 12, 46, 47, 58, 59, 69, 70, 80, 81, 103, 104, 114, 115, 125, 126, 136, 137, 147, 148, 158, 159, 178, 179, 189, 190, 200, 201, 211, 212, 222, 223], "index", { id: 11, data: 13, body: 41, filePath: 42, assetImports: 43, digest: 45, deferredRender: 16 }, { title: 14, description: 15, editUrl: 16, head: 17, template: 18, hero: 19, sidebar: 38, pagefind: 16, draft: 39 }, "R2D2 Programming Language", "A modern, safe, and expressive programming language for building reliable applications", true, [], "splash", { tagline: 20, image: 21, actions: 24 }, "A modern, unsafe, and expressive programming language for building unreliable applications", { alt: 22, file: 23 }, "", "__ASTRO_IMAGE_../../assets/rexDino.svg", [25, 32], { text: 26, link: 27, variant: 28, icon: 29 }, "Get Started", "/guides/quick-start/", "primary", { type: 30, name: 31 }, "icon", "right-arrow", { text: 33, link: 34, variant: 35, icon: 36 }, "View on GitHub", "https://github.com/ArturC03/r2d2", "secondary", { type: 30, name: 37 }, "github", { hidden: 39, attrs: 40 }, false, {}, 'import { Card, CardGrid } from \'@astrojs/starlight/components\';\n\n## Why R2D2?\n\n<CardGrid>\n	<Card title="Safe by Design" icon="shield-check">\n		Built-in error handling, null safety, and strong type system help prevent common programming mistakes.\n	</Card>\n	<Card title="Modern Features" icon="rocket">\n		Async/await, pattern matching, and first-class functions make complex tasks simple.\n	</Card>\n	<Card title="Expressive Syntax" icon="pencil">\n		Clean, readable syntax that focuses on developer productivity and code maintainability.\n	</Card>\n	<Card title="Reliable Performance" icon="speedometer">\n		Efficient compilation and runtime optimizations ensure your code runs fast.\n	</Card>\n</CardGrid>\n\n## Quick Example\n\n```typescript\nmodule hello {\n	fn greet(name string) {\n		match validate_name(name) {\n			ok(valid_name) => console.log("Hello,", valid_name),\n			error(msg) => console.error("Error:", msg)\n		}\n	}\n\n	fn validate_name(name string) {\n		if name.length() == 0 {\n			return error("Name cannot be empty");\n		}\n		return ok(name);\n	}\n\n	fn main() {\n		greet("R2D2");  // Prints: Hello, R2D2\n		greet("");      // Prints: Error: Name cannot be empty\n	}\n}\n```\n\n## Get Started\n\nReady to try R2D2? Follow our quick start guide to write your first program:\n\n<CardGrid>\n	<Card title="Installation" icon="download">\n		Learn how to install R2D2 on your system.\n		[Install Now →](/guides/installation/)\n	</Card>\n	<Card title="Quick Start" icon="open-book">\n		Write your first R2D2 program in minutes.\n		[Start Learning →](/guides/quick-start/)\n	</Card>\n	<Card title="Examples" icon="document">\n		Explore example projects and code snippets.\n		[View Examples →](/examples/)\n	</Card>\n	<Card title="Documentation" icon="document">\n		Dive into the comprehensive language reference.\n		[Read Docs →](/reference/introduction/)\n	</Card>\n</CardGrid>', "src/content/docs/index.mdx", [44], "../../assets/rexDino.svg", "b3af2cbf2ce6ce18", "examples", { id: 46, data: 48, body: 55, filePath: 56, digest: 57, deferredRender: 16 }, { title: 49, description: 50, editUrl: 16, head: 51, template: 52, sidebar: 53, pagefind: 16, draft: 39 }, "R2D2 Examples", "Collection of example projects and code snippets using R2D2", [], "doc", { hidden: 39, attrs: 54 }, {}, '## Basic Examples\n\n### Hello World\n\nThe simplest R2D2 program:\n\n```typescript\nmodule hello {\n  fn main() {\n    console.log("Hello, World!");\n  }\n}\n```\n\n### Temperature Converter\n\nA program to convert between Celsius and Fahrenheit:\n\n```typescript\nmodule temperature {\n  fn celsius_to_fahrenheit(celsius float) {\n    return celsius * 9.0/5.0 + 32.0;\n  }\n\n  fn fahrenheit_to_celsius(fahrenheit float) {\n    return (fahrenheit - 32.0) * 5.0/9.0;\n  }\n\n  fn main() {\n    var celsius float = 25.0;\n    var fahrenheit = celsius_to_fahrenheit(celsius);\n    console.log(celsius, "°C =", fahrenheit, "°F");\n\n    fahrenheit = 98.6;\n    celsius = fahrenheit_to_celsius(fahrenheit);\n    console.log(fahrenheit, "°F =", celsius, "°C");\n  }\n}\n```\n\n### Todo List\n\nA simple todo list implementation:\n\n```typescript\nmodule todo {\n  struct TodoItem {\n    id int\n    text string\n    completed bool\n  }\n\n  struct TodoList {\n    items []TodoItem\n    next_id int\n  }\n\n  fn new_todo_list() {\n    return TodoList{\n      items: [],\n      next_id: 1\n    };\n  }\n\n  fn (list TodoList) add(text string) {\n    var item = TodoItem{\n      id: list.next_id,\n      text: text,\n      completed: false\n    };\n    list.items.push(item);\n    list.next_id++;\n  }\n\n  fn (list TodoList) toggle(id int) {\n    for var i = 0; i < list.items.length(); i++ {\n      if list.items[i].id == id {\n        list.items[i].completed = !list.items[i].completed;\n        break;\n      }\n    }\n  }\n\n  fn (list TodoList) print() {\n    for var item in list.items {\n      var status = if item.completed { "[x]" } else { "[ ]" };\n      console.log(status, item.text);\n    }\n  }\n\n  fn main() {\n    var list = new_todo_list();\n    list.add("Buy groceries");\n    list.add("Walk the dog");\n    list.add("Learn R2D2");\n    \n    list.toggle(2);  // Complete "Walk the dog"\n    list.print();\n  }\n}\n```\n\n## Web Applications\n\n### Simple Counter\n\nA web counter component:\n\n```typescript\nmodule counter {\n  struct Counter {\n    count int\n  }\n\n  fn new_counter() {\n    return Counter{count: 0};\n  }\n\n  fn (c Counter) increment() {\n    c.count++;\n    c.render();\n  }\n\n  fn (c Counter) decrement() {\n    c.count--;\n    c.render();\n  }\n\n  fn (c Counter) render() {\n    dom.set_html("#counter", string(c.count));\n  }\n\n  fn main() {\n    var counter = new_counter();\n    \n    dom.on_click("#increment", fn() {\n      counter.increment();\n    });\n\n    dom.on_click("#decrement", fn() {\n      counter.decrement();\n    });\n\n    counter.render();\n  }\n}\n```\n\n### API Client\n\nA simple HTTP API client:\n\n```typescript\nmodule api_client {\n  struct User {\n    id int\n    name string\n    email string\n  }\n\n  fn async fetch_user(id int) {\n    var url = "https://api.example.com/users/" + string(id);\n    \n    match await http.get(url) {\n      ok(response) => {\n        match response.json() {\n          ok(data) => return ok(User{\n            id: data["id"],\n            name: data["name"],\n            email: data["email"]\n          }),\n          error(e) => return error("Failed to parse JSON: " + e)\n        }\n      },\n      error(e) => return error("Failed to fetch user: " + e)\n    }\n  }\n\n  fn async main() {\n    match await fetch_user(1) {\n      ok(user) => {\n        console.log("User:", user.name);\n        console.log("Email:", user.email);\n      },\n      error(e) => console.error("Error:", e)\n    }\n  }\n}\n```\n\n## Command Line Tools\n\n### File Processor\n\nA tool to process text files:\n\n```typescript\nmodule file_processor {\n  fn async process_file(path string) {\n    match await fs.read_file(path) {\n      ok(content) => {\n        var lines = content.split("\\n");\n        var line_count = lines.length();\n        var word_count = 0;\n        var char_count = 0;\n\n        for var line in lines {\n          word_count += line.split(" ").length();\n          char_count += line.length();\n        }\n\n        console.log("Lines:", line_count);\n        console.log("Words:", word_count);\n        console.log("Chars:", char_count);\n      },\n      error(e) => console.error("Error reading file:", e)\n    }\n  }\n\n  fn async main() {\n    if os.args.length() < 2 {\n      console.error("Usage: r2d2 file_processor.r2d2 <filename>");\n      return;\n    }\n\n    await process_file(os.args[1]);\n  }\n}\n```\n\n### Task Runner\n\nA simple task automation tool:\n\n```typescript\nmodule task_runner {\n  struct Task {\n    name string\n    command string\n    depends_on []string\n  }\n\n  fn async run_task(tasks Map<string, Task>, name string, completed Set<string>) {\n    if completed.has(name) {\n      return ok(null);\n    }\n\n    var task = tasks.get(name);\n    if task == null {\n      return error("Task not found: " + name);\n    }\n\n    // Run dependencies first\n    for var dep in task.depends_on {\n      match await run_task(tasks, dep, completed) {\n        ok(_) => {},\n        error(e) => return error(e)\n      }\n    }\n\n    console.log("Running task:", name);\n    match await os.exec(task.command) {\n      ok(_) => {\n        completed.add(name);\n        return ok(null);\n      },\n      error(e) => return error("Task failed: " + e)\n    }\n  }\n\n  fn async main() {\n    var tasks = Map<string, Task>{};\n    tasks.set("build", Task{\n      name: "build",\n      command: "r2d2 build",\n      depends_on: ["test"]\n    });\n    tasks.set("test", Task{\n      name: "test",\n      command: "r2d2 test",\n      depends_on: []\n    });\n\n    var completed = Set<string>{};\n    match await run_task(tasks, "build", completed) {\n      ok(_) => console.log("All tasks completed successfully"),\n      error(e) => console.error("Error:", e)\n    }\n  }\n}\n```\n\n## Data Structures\n\n### Binary Tree\n\nImplementation of a binary search tree:\n\n```typescript\nmodule binary_tree {\n  struct Node {\n    value int\n    left Node\n    right Node\n  }\n\n  fn new_node(value int) {\n    return Node{\n      value: value,\n      left: null,\n      right: null\n    };\n  }\n\n  fn (node Node) insert(value int) {\n    if value < node.value {\n      if node.left == null {\n        node.left = new_node(value);\n      } else {\n        node.left.insert(value);\n      }\n    } else {\n      if node.right == null {\n        node.right = new_node(value);\n      } else {\n        node.right.insert(value);\n      }\n    }\n  }\n\n  fn (node Node) contains(value int) {\n    if node == null {\n      return false;\n    }\n    if node.value == value {\n      return true;\n    }\n    if value < node.value {\n      return node.left.contains(value);\n    }\n    return node.right.contains(value);\n  }\n\n  fn (node Node) print() {\n    if node == null {\n      return;\n    }\n    node.left.print();\n    console.log(node.value);\n    node.right.print();\n  }\n\n  fn main() {\n    var root = new_node(5);\n    root.insert(3);\n    root.insert(7);\n    root.insert(1);\n    root.insert(9);\n\n    console.log("In-order traversal:");\n    root.print();\n\n    console.log("Contains 7:", root.contains(7));\n    console.log("Contains 4:", root.contains(4));\n  }\n}\n```\n\n## Next Steps\n\n1. Try the [Web Applications](/examples/web/) examples\n2. Explore [Node.js Apps](/examples/nodejs/)\n3. Build [Libraries](/examples/libraries/)\n4. Check out [Community Projects](/examples/community/)', "src/content/docs/examples/index.mdx", "2b028c45a3b3c41b", "guides/advanced", { id: 58, data: 60, body: 66, filePath: 67, digest: 68, deferredRender: 16 }, { title: 61, description: 62, editUrl: 16, head: 63, template: 52, sidebar: 64, pagefind: 16, draft: 39 }, "Advanced R2D2 Features", "Explore advanced features and patterns in the R2D2 programming language", [], { hidden: 39, attrs: 65 }, {}, '## Generics\n\nR2D2 supports generic types and functions for writing reusable code:\n\n### Generic Functions\n\n```typescript\nfn identity<T>(value: T): T {\n    return value;\n}\n\n// Usage\nlet num = identity<i32>(42);\nlet text = identity<string>("Hello");\n```\n\n### Generic Interfaces\n\n```typescript\ninterface Container<T> {\n    fn get(): T;\n    fn set(value: T): void;\n}\n\nmodule Box<T> implements Container<T> {\n    let value: T;\n    \n    fn get(): T {\n        return value;\n    }\n    \n    fn set(newValue: T): void {\n        value = newValue;\n    }\n}\n```\n\n### Generic Constraints\n\n```typescript\ninterface Numeric {\n    fn toNumber(): f64;\n}\n\nfn sum<T: Numeric>(values: T[]): f64 {\n    let total = 0.0;\n    for value in values {\n        total += value.toNumber();\n    }\n    return total;\n}\n```\n\n## Pattern Matching\n\nR2D2 provides powerful pattern matching capabilities:\n\n```typescript\nenum Shape {\n    Circle(f64),              // radius\n    Rectangle(f64, f64),      // width, height\n    Triangle(f64, f64, f64)   // sides\n}\n\nfn calculateArea(shape: Shape): f64 {\n    match shape {\n        Circle(r) => PI * r * r,\n        Rectangle(w, h) => w * h,\n        Triangle(a, b, c) => {\n            let s = (a + b + c) / 2.0;\n            (s * (s - a) * (s - b) * (s - c)).sqrt()\n        }\n    }\n}\n```\n\n### Pattern Guards\n\n```typescript\nfn describe(n: i32): string {\n    match n {\n        x if x < 0 => "negative",\n        x if x == 0 => "zero",\n        x if x % 2 == 0 => "positive even",\n        _ => "positive odd"\n    }\n}\n```\n\n## Decorators\n\nDecorators provide a way to modify or enhance classes, methods, and functions:\n\n```typescript\n// Decorator definition\nfn log(target: Function): Function {\n    return (...args: any[]): any => {\n        console.log("Calling function with args:", args);\n        let result = target(...args);\n        console.log("Function returned:", result);\n        return result;\n    };\n}\n\n// Using decorators\n@log\nfn add(a: i32, b: i32): i32 {\n    return a + b;\n}\n\n// Class decorators\n@singleton\nmodule Database {\n    fn connect(): void {\n        // Implementation\n    }\n}\n```\n\n## Advanced Types\n\n### Union Types\n\n```typescript\ntype NumberOrString = i32 | string;\n\nfn process(value: NumberOrString): string {\n    match value {\n        i32 => value.toString(),\n        string => value\n    }\n}\n```\n\n### Intersection Types\n\n```typescript\ninterface Loggable {\n    fn log(): void;\n}\n\ninterface Serializable {\n    fn serialize(): string;\n}\n\ntype LoggableAndSerializable = Loggable & Serializable;\n```\n\n### Type Aliases\n\n```typescript\ntype UserId = i32;\ntype UserMap = Map<UserId, User>;\ntype Callback<T> = fn(value: T): void;\n```\n\n## Asynchronous Programming\n\n### Async Iterators\n\n```typescript\nasync fn* generateNumbers(): AsyncIterator<i32> {\n    for i in 0..5 {\n        await delay(1000);\n        yield i;\n    }\n}\n\nasync fn processNumbers() {\n    for await num in generateNumbers() {\n        console.log(num);\n    }\n}\n```\n\n### Custom Async Types\n\n```typescript\ninterface AsyncResult<T> {\n    fn then<U>(fn(T): Promise<U>): AsyncResult<U>;\n    fn catch<E>(fn(Error): Promise<E>): AsyncResult<E>;\n}\n\nmodule AsyncOperation<T> implements AsyncResult<T> {\n    // Implementation\n}\n```\n\n## Memory Management\n\n### Reference Counting\n\n```typescript\nmodule RefCounted<T> {\n    let value: T;\n    let count: i32;\n    \n    fn new(value: T): RefCounted<T> {\n        return RefCounted { value, count: 1 };\n    }\n    \n    fn clone(): RefCounted<T> {\n        count += 1;\n        return this;\n    }\n    \n    fn drop(): void {\n        count -= 1;\n        if count == 0 {\n            // Clean up resources\n        }\n    }\n}\n```\n\n## Metaprogramming\n\n### Compile-Time Function Execution\n\n```typescript\nconst fn factorial(n: i32): i32 {\n    if n <= 1 {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nconst FACT_5 = factorial(5);  // Computed at compile time\n```\n\n### Type Reflection\n\n```typescript\nfn getTypeName<T>(): string {\n    return typeOf<T>();\n}\n\ninterface TypeInfo {\n    name: string;\n    methods: string[];\n    properties: string[];\n}\n\nfn inspect<T>(): TypeInfo {\n    // Implementation using reflection\n}\n```\n\n## Next Steps\n\n1. Explore [Design Patterns](/guides/patterns/) in R2D2\n2. Learn about [Performance Optimization](/guides/performance/)\n3. Read about [Testing Strategies](/guides/testing/)\n4. Check out [Advanced Examples](/examples/advanced/)', "src/content/docs/guides/advanced.mdx", "156b759819de9af5", "guides/basics", { id: 69, data: 71, body: 77, filePath: 78, digest: 79, deferredRender: 16 }, { title: 72, description: 73, editUrl: 16, head: 74, template: 52, sidebar: 75, pagefind: 16, draft: 39 }, "R2D2 Language Basics", "Learn the fundamental concepts and syntax of the R2D2 programming language", [], { hidden: 39, attrs: 76 }, {}, '## Basic Syntax\n\nR2D2 uses a clean, modern syntax that should feel familiar to developers coming from other languages.\n\n### Variables and Constants\n\nVariables are declared using `let` and constants with `const`:\n\n```typescript\nlet mutable = 42;        // Mutable variable\nconst PI = 3.14159;      // Immutable constant\n```\n\n### Basic Types\n\nR2D2 has several built-in types:\n\n```typescript\nlet integer: i32 = 42;           // 32-bit integer\nlet float: f64 = 3.14;          // 64-bit floating point\nlet text: string = "Hello";      // String type\nlet flag: bool = true;          // Boolean type\nlet nothing: void = void;       // Void type\n```\n\n### Type Inference\n\nR2D2 has smart type inference, so type annotations are often optional:\n\n```typescript\nlet age = 25;              // Inferred as i32\nlet name = "R2D2";         // Inferred as string\nlet active = true;         // Inferred as bool\n```\n\n## Functions\n\nFunctions are declared using the `fn` keyword:\n\n```typescript\nfn add(a: i32, b: i32): i32 {\n    return a + b;\n}\n\n// Functions with single expressions can be shortened\nfn multiply(a: i32, b: i32) = a * b;\n\n// Functions with no return value\nfn log(message: string): void {\n    // Implementation\n}\n```\n\n## Control Flow\n\n### If Expressions\n\n```typescript\nif condition {\n    // code\n} else if other_condition {\n    // code\n} else {\n    // code\n}\n\n// If expressions can return values\nlet max = if a > b { a } else { b };\n```\n\n### Loops\n\n```typescript\n// While loop\nwhile condition {\n    // code\n}\n\n// For loop over range\nfor i in 0..10 {\n    // code\n}\n\n// For loop over array\nfor item in array {\n    // code\n}\n```\n\n## Modules and Interfaces\n\n### Modules\n\nModules help organize code into reusable units:\n\n```typescript\nmodule Math {\n    fn add(a: i32, b: i32): i32 {\n        return a + b;\n    }\n    \n    fn subtract(a: i32, b: i32): i32 {\n        return a - b;\n    }\n}\n\n// Using module functions\nlet sum = Math.add(5, 3);\n```\n\n### Interfaces\n\nInterfaces define contracts that modules can implement:\n\n```typescript\ninterface Shape {\n    fn area(): f64;\n    fn perimeter(): f64;\n}\n\nmodule Rectangle implements Shape {\n    let width: f64;\n    let height: f64;\n    \n    fn area(): f64 {\n        return width * height;\n    }\n    \n    fn perimeter(): f64 {\n        return 2 * (width + height);\n    }\n}\n```\n\n## Arrays and Collections\n\n### Arrays\n\n```typescript\n// Fixed-size arrays\nlet numbers: i32[] = [1, 2, 3, 4, 5];\n\n// Array operations\nlet first = numbers[0];\nlet length = numbers.length;\n```\n\n### Maps\n\n```typescript\nlet scores = Map<string, i32>();\nscores.set("Alice", 100);\nscores.set("Bob", 85);\n\nlet aliceScore = scores.get("Alice");\n```\n\n## Error Handling\n\nR2D2 uses a Result type for error handling:\n\n```typescript\nfn divide(a: i32, b: i32): Result<f64, string> {\n    if b == 0 {\n        return Error("Division by zero");\n    }\n    return Ok(a as f64 / b as f64);\n}\n\n// Using Results\nlet result = divide(10, 2);\nmatch result {\n    Ok(value) => {\n        // Use value\n    },\n    Error(message) => {\n        // Handle error\n    }\n}\n```\n\n## Next Steps\n\nNow that you understand the basics, you can:\n\n1. Explore [Advanced Features](/guides/advanced/)\n2. Learn about [JavaScript Interop](/guides/js-interop/)\n3. Check out the [Standard Library](/reference/stdlib/)\n4. Try building some [Example Projects](/examples/)', "src/content/docs/guides/basics.mdx", "f8c14f1159959dc6", "guides/example", { id: 80, data: 82, body: 88, filePath: 89, digest: 90, rendered: 91 }, { title: 83, description: 84, editUrl: 16, head: 85, template: 52, sidebar: 86, pagefind: 16, draft: 39 }, "Example Guide", "A guide in my new Starlight docs site.", [], { hidden: 39, attrs: 87 }, {}, "Guides lead a user through a specific task they want to accomplish, often with a sequence of steps.\nWriting a good guide requires thinking about what your users are trying to do.\n\n## Further reading\n\n- Read [about how-to guides](https://diataxis.fr/how-to-guides/) in the Diátaxis framework", "src/content/docs/guides/example.md", "45662d56567dd245", { html: 92, metadata: 93 }, '<p>Guides lead a user through a specific task they want to accomplish, often with a sequence of steps.\nWriting a good guide requires thinking about what your users are trying to do.</p>\n<h2 id="further-reading">Further reading</h2>\n<ul>\n<li>Read <a href="https://diataxis.fr/how-to-guides/">about how-to guides</a> in the Diátaxis framework</li>\n</ul>', { headings: 94, localImagePaths: 99, remoteImagePaths: 100, frontmatter: 101, imagePaths: 102 }, [95], { depth: 96, slug: 97, text: 98 }, 2, "further-reading", "Further reading", [], [], { title: 83, description: 84 }, [], "guides/installation", { id: 103, data: 105, body: 111, filePath: 112, digest: 113, deferredRender: 16 }, { title: 106, description: 107, editUrl: 16, head: 108, template: 52, sidebar: 109, pagefind: 16, draft: 39 }, "Installing R2D2", "Learn how to install and set up R2D2 on your system", [], { hidden: 39, attrs: 110 }, {}, "## System Requirements\n\nBefore installing R2D2, ensure your system meets these requirements:\n\n- Node.js 16.0 or higher\n- npm 7.0 or higher\n- Git (for version control)\n\n## Installation Steps\n\n### 1. Install via npm\n\nThe easiest way to install R2D2 is through npm:\n\n```bash\nnpm install -g r2d2-lang\n```\n\n### 2. Verify Installation\n\nCheck that R2D2 was installed correctly:\n\n```bash\nr2d2 --version\n```\n\n### 3. Create a New Project\n\nCreate a new R2D2 project:\n\n```bash\nr2d2 new my-project\ncd my-project\n```\n\nThis will create a new directory with the following structure:\n\n```\nmy-project/\n├── src/\n│   └── main.r2d2\n├── package.json\n├── r2d2.config.json\n└── README.md\n```\n\n### 4. Project Setup\n\nInstall project dependencies:\n\n```bash\nnpm install\n```\n\n## IDE Support\n\nR2D2 provides excellent IDE support through language server extensions:\n\n- VS Code: [R2D2 Language Support](vscode:extension/r2d2-lang)\n- Vim/Neovim: Use with [coc-r2d2](https://github.com/r2d2-lang/coc-r2d2)\n- Other editors: Generic LSP support\n\n## Next Steps\n\nOnce you have R2D2 installed, you can:\n\n1. Follow the [Getting Started](/guides/getting-started/) guide\n2. Try the [Interactive Tutorial](/guides/tutorial/)\n3. Browse [Example Projects](/examples/)\n\n## Troubleshooting\n\n### Common Issues\n\n#### Permission Errors\n\nIf you encounter permission errors during global installation:\n\n```bash\nsudo npm install -g r2d2-lang\n```\n\n#### Path Issues\n\nIf the `r2d2` command is not found, ensure your npm global bin directory is in your PATH.\n\n### Getting Help\n\nIf you run into problems:\n\n1. Check our [FAQ](/guides/faq/)\n2. Visit our [GitHub Issues](https://github.com/ArturC03/r2d2/issues)\n3. Join our [Discord Community](https://discord.gg/r2d2-lang)", "src/content/docs/guides/installation.mdx", "2ccc6e702585476d", "guides/js-interop", { id: 114, data: 116, body: 122, filePath: 123, digest: 124, deferredRender: 16 }, { title: 117, description: 118, editUrl: 16, head: 119, template: 52, sidebar: 120, pagefind: 16, draft: 39 }, "JavaScript Interoperability", "Learn how to use JavaScript code from R2D2 and vice versa", [], { hidden: 39, attrs: 121 }, {}, '## Overview\n\nR2D2 is designed to seamlessly interoperate with JavaScript, allowing you to:\n- Use JavaScript libraries in R2D2 code\n- Export R2D2 code for use in JavaScript\n- Work with JavaScript types and values\n- Access the DOM and Web APIs\n\n## Using JavaScript from R2D2\n\n### Importing JavaScript Modules\n\nUse the `import` statement with the `.js` extension:\n\n```typescript\nimport { useState, useEffect } from "react.js";\nimport axios from "axios.js";\n```\n\n### JavaScript Types\n\nR2D2 provides type definitions for common JavaScript types:\n\n```typescript\nlet element: HTMLElement;\nlet promise: Promise<string>;\nlet array: Array<i32>;\nlet obj: Object;\nlet func: Function;\n```\n\n### DOM Access\n\nAccess the DOM using built-in bindings:\n\n```typescript\nmodule DOMExample {\n    fn updateUI(): void {\n        let button = document.querySelector("#myButton");\n        button.addEventListener("click", () => {\n            console.log("Button clicked!");\n        });\n    }\n    \n    fn createElement(): void {\n        let div = document.createElement("div");\n        div.textContent = "Created with R2D2";\n        document.body.appendChild(div);\n    }\n}\n```\n\n### Promises and Async\n\nWork with JavaScript promises using async/await:\n\n```typescript\nfn fetchData(): Promise<string> {\n    let response = await fetch("https://api.example.com/data");\n    let data = await response.json();\n    return data;\n}\n\nasync fn processData(): Promise<void> {\n    try {\n        let result = await fetchData();\n        console.log(result);\n    } catch (error) {\n        console.error("Failed to fetch:", error);\n    }\n}\n```\n\n## Using R2D2 from JavaScript\n\n### Exporting R2D2 Code\n\nMark modules and functions for export using the `export` keyword:\n\n```typescript\nexport module Calculator {\n    export fn add(a: i32, b: i32): i32 {\n        return a + b;\n    }\n    \n    export fn multiply(a: i32, b: i32): i32 {\n        return a * b;\n    }\n}\n```\n\nThe compiled JavaScript can then be imported:\n\n```javascript\nimport { Calculator } from \'./calculator.js\';\n\nconsole.log(Calculator.add(5, 3));     // 8\nconsole.log(Calculator.multiply(4, 2)); // 8\n```\n\n### Type Declarations\n\nR2D2 automatically generates TypeScript declaration files (`.d.ts`) for exported code:\n\n```typescript\n// calculator.d.ts\nexport namespace Calculator {\n    function add(a: number, b: number): number;\n    function multiply(a: number, b: number): number;\n}\n```\n\n## Working with NPM Packages\n\n### Package Configuration\n\nConfigure npm dependencies in your `package.json`:\n\n```json\n{\n  "dependencies": {\n    "react": "^18.0.0",\n    "axios": "^1.0.0"\n  }\n}\n```\n\n### Type Definitions\n\nR2D2 can use TypeScript type definitions for better JavaScript interop:\n\n```typescript\n// Using @types/react\nimport { FC, ReactNode } from "react.js";\n\ninterface Props {\n    children: ReactNode;\n}\n\nexport let MyComponent: FC<Props> = (props) => {\n    return props.children;\n};\n```\n\n## Best Practices\n\n1. **Type Safety**: Always provide type annotations when working with JavaScript code.\n2. **Error Handling**: Use try/catch with async operations.\n3. **Memory Management**: Be aware of JavaScript\'s garbage collection when managing resources.\n4. **Browser APIs**: Check for feature availability before using browser-specific APIs.\n\n## Example: Full Stack Application\n\nHere\'s a complete example of R2D2 and JavaScript interop:\n\n```typescript\n// api.r2d2\nimport axios from "axios.js";\n\nexport interface User {\n    id: i32;\n    name: string;\n    email: string;\n}\n\nexport module API {\n    export async fn getUsers(): Promise<User[]> {\n        let response = await axios.get("/api/users");\n        return response.data as User[];\n    }\n}\n\n// app.r2d2\nimport { useState, useEffect } from "react.js";\nimport { User, API } from "./api.r2d2";\n\nexport let UserList = () => {\n    let [users, setUsers] = useState<User[]>([]);\n    let [loading, setLoading] = useState(true);\n    \n    useEffect(() => {\n        async fn fetchUsers() {\n            try {\n                let data = await API.getUsers();\n                setUsers(data);\n            } catch (error) {\n                console.error("Failed to fetch users:", error);\n            } finally {\n                setLoading(false);\n            }\n        }\n        \n        fetchUsers();\n    }, []);\n    \n    if loading {\n        return "Loading...";\n    }\n    \n    return (\n        <div>\n            {users.map(user => (\n                <div key={user.id}>\n                    <h3>{user.name}</h3>\n                    <p>{user.email}</p>\n                </div>\n            ))}\n        </div>\n    );\n};\n```\n\n## Next Steps\n\n1. Explore the [Standard Library](/reference/stdlib/) for built-in JavaScript bindings\n2. Learn about [Advanced Features](/guides/advanced/) like decorators and generics\n3. Check out [Example Projects](/examples/) showcasing JavaScript interop\n4. Read the [API Reference](/reference/types/) for detailed type information', "src/content/docs/guides/js-interop.mdx", "bc58ff57cb5131f6", "guides/quick-start", { id: 125, data: 127, body: 133, filePath: 134, digest: 135, deferredRender: 16 }, { title: 128, description: 129, editUrl: 16, head: 130, template: 52, sidebar: 131, pagefind: 16, draft: 39 }, "Quick Start Guide", "Get up and running with R2D2 in minutes", [], { hidden: 39, attrs: 132 }, {}, '## Your First R2D2 Program\n\nAfter [installing R2D2](/guides/installation/), let\'s create your first program:\n\n1. Create a new project:\n```bash\nr2d2 new hello-world\ncd hello-world\n```\n\n2. Open `src/main.r2d2` in your editor and replace its contents with:\n\n```typescript\nmodule hello {\n  fn main() {\n    console.log("Hello, R2D2!");\n  }\n}\n```\n\n3. Run your program:\n```bash\nr2d2 run\n```\n\n## A More Complex Example\n\nLet\'s create a simple counter program:\n\n```typescript\nmodule counter {\n  fn count_to(max int) {\n    for var i int = 0; i < max; i++ {\n      console.log(i);\n    }\n  }\n\n  fn main() {\n    count_to(10);\n  }\n}\n```\n\n## Working with Variables\n\nR2D2 uses explicit variable declarations:\n\n```typescript\nmodule variables {\n  fn main() {\n    var name string = "R2D2";\n    var age int = 42;\n    var pi float = 3.14159;\n    var is_active bool = true;\n    \n    console.log("Name:", name);\n    console.log("Age:", age);\n    console.log("Pi:", pi);\n    console.log("Active:", is_active);\n  }\n}\n```\n\n## Functions and Modules\n\nFunctions are grouped in modules:\n\n```typescript\nmodule math {\n  fn add(a int, b int) {\n    return a + b;\n  }\n\n  fn multiply(a int, b int) {\n    return a * b;\n  }\n\n  fn main() {\n    var sum = add(5, 3);\n    var product = multiply(4, 2);\n    \n    console.log("Sum:", sum);\n    console.log("Product:", product);\n  }\n}\n```\n\n## Control Flow\n\nR2D2 supports familiar control flow structures:\n\n```typescript\nmodule control_flow {\n  fn main() {\n    // If statement\n    var x int = 10;\n    if x > 5 {\n      console.log("x is greater than 5");\n    } else {\n      console.log("x is less than or equal to 5");\n    }\n\n    // For loop\n    for var i int = 0; i < 5; i++ {\n      console.log("Iteration:", i);\n    }\n\n    // While loop\n    var count int = 0;\n    while count < 3 {\n      console.log("Count:", count);\n      count++;\n    }\n  }\n}\n```\n\n## Next Steps\n\nNow that you\'ve got a taste of R2D2, you can:\n\n1. Learn more about [Basic Concepts](/guides/basics/)\n2. Explore the [Standard Library](/reference/stdlib/)\n3. Try building some [Example Projects](/examples/)\n4. Join our [Community](/community/)', "src/content/docs/guides/quick-start.mdx", "bb82e9db9ca3500c", "reference/control-flow", { id: 136, data: 138, body: 144, filePath: 145, digest: 146, deferredRender: 16 }, { title: 139, description: 140, editUrl: 16, head: 141, template: 52, sidebar: 142, pagefind: 16, draft: 39 }, "Control Flow", "Complete reference for control flow statements in R2D2", [], { hidden: 39, attrs: 143 }, {}, '## If Statements\n\nBasic conditional branching:\n\n```typescript\nmodule conditionals {\n  fn check_number(x int) {\n    if x > 0 {\n      console.log("Positive");\n    } else if x < 0 {\n      console.log("Negative");\n    } else {\n      console.log("Zero");\n    }\n  }\n\n  fn check_age(age int) {\n    var message string = if age >= 18 {\n      "Adult"\n    } else {\n      "Minor"\n    };\n    console.log(message);\n  }\n}\n```\n\n## For Loops\n\nR2D2 supports C-style for loops:\n\n```typescript\nmodule loops {\n  fn count_up() {\n    // Basic for loop\n    for var i int = 0; i < 5; i++ {\n      console.log(i);\n    }\n  }\n\n  fn sum_array(numbers []int) {\n    var total int = 0;\n    // Array iteration\n    for var i int = 0; i < numbers.length(); i++ {\n      total += numbers[i];\n    }\n    return total;\n  }\n}\n```\n\n## While Loops\n\nWhile loops continue until a condition becomes false:\n\n```typescript\nmodule while_examples {\n  fn countdown(start int) {\n    var count int = start;\n    while count > 0 {\n      console.log(count);\n      count--;\n    }\n    console.log("Liftoff!");\n  }\n\n  fn read_until_valid() {\n    var input string = "";\n    while input.length() == 0 {\n      input = console.read_line();\n    }\n    return input;\n  }\n}\n```\n\n## Break and Continue\n\nControl flow within loops:\n\n```typescript\nmodule loop_control {\n  fn find_first_positive(numbers []int) {\n    for var i int = 0; i < numbers.length(); i++ {\n      if numbers[i] <= 0 {\n        continue;  // Skip non-positive numbers\n      }\n      return numbers[i];  // Return first positive number\n    }\n    return 0;  // No positive numbers found\n  }\n\n  fn find_in_matrix(matrix [][]int, target int) {\n    for var i int = 0; i < matrix.length(); i++ {\n      for var j int = 0; j < matrix[i].length(); j++ {\n        if matrix[i][j] == target {\n          console.log("Found at:", i, j);\n          break;  // Exit inner loop\n        }\n      }\n    }\n  }\n}\n```\n\n## Match Expressions\n\nPattern matching with match:\n\n```typescript\nmodule matching {\n  fn describe_number(x int) {\n    match x {\n      0 => console.log("Zero"),\n      1 => console.log("One"),\n      2 => console.log("Two"),\n      _ => console.log("Many")\n    }\n  }\n\n  fn get_day_type(day string) {\n    return match day {\n      "Saturday" | "Sunday" => "Weekend",\n      "Monday" ... "Friday" => "Weekday",\n      _ => "Invalid day"\n    };\n  }\n}\n```\n\n## Error Handling\n\nUsing match for error handling:\n\n```typescript\nmodule error_handling {\n  fn divide(a int, b int) {\n    if b == 0 {\n      return error("Division by zero");\n    }\n    return ok(a / b);\n  }\n\n  fn safe_divide(a int, b int) {\n    match divide(a, b) {\n      ok(result) => console.log("Result:", result),\n      error(msg) => console.log("Error:", msg)\n    }\n  }\n\n  fn main() {\n    safe_divide(10, 2);  // Prints: Result: 5\n    safe_divide(10, 0);  // Prints: Error: Division by zero\n  }\n}\n```\n\n## Async Control Flow\n\nControl flow with async operations:\n\n```typescript\nmodule async_flow {\n  fn async fetch_all(urls []string) {\n    for var i int = 0; i < urls.length(); i++ {\n      var response = await http.get(urls[i]);\n      if response.status != 200 {\n        continue;\n      }\n      var data = await response.text();\n      console.log("Data from", urls[i], ":", data);\n    }\n  }\n\n  fn async retry_operation(operation fn() error) {\n    var max_attempts int = 3;\n    for var attempt int = 1; attempt <= max_attempts; attempt++ {\n      match await operation() {\n        ok(_) => break,\n        error(e) => {\n          if attempt == max_attempts {\n            console.log("Failed after", max_attempts, "attempts");\n          } else {\n            console.log("Retrying...");\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Next Steps\n\n1. Learn about [Functions](/reference/functions/)\n2. Explore [Types](/reference/types/)\n3. See [Error Handling](/reference/error-handling/)\n4. Check the [Standard Library](/reference/stdlib/)', "src/content/docs/reference/control-flow.mdx", "3c333ca3fde56375", "reference/error-handling", { id: 147, data: 149, body: 155, filePath: 156, digest: 157, deferredRender: 16 }, { title: 150, description: 151, editUrl: 16, head: 152, template: 52, sidebar: 153, pagefind: 16, draft: 39 }, "Error Handling", "Complete reference for error handling in R2D2", [], { hidden: 39, attrs: 154 }, {}, '## Basic Error Handling\n\nR2D2 uses a Result type for handling operations that can fail:\n\n```typescript\nmodule errors {\n  fn divide(a int, b int) {\n    if b == 0 {\n      return error("Division by zero");\n    }\n    return ok(a / b);\n  }\n\n  fn main() {\n    match divide(10, 2) {\n      ok(result) => console.log("Result:", result),\n      error(msg) => console.log("Error:", msg)\n    }\n  }\n}\n```\n\n## Error Propagation\n\nUsing match to handle and propagate errors:\n\n```typescript\nmodule calculator {\n  fn divide(a int, b int) {\n    if b == 0 {\n      return error("Division by zero");\n    }\n    return ok(a / b);\n  }\n\n  fn calculate(x int, y int) {\n    match divide(x, y) {\n      ok(result) => {\n        var doubled = result * 2;\n        return ok(doubled);\n      },\n      error(msg) => {\n        return error("Calculation failed: " + msg);\n      }\n    }\n  }\n\n  fn main() {\n    match calculate(10, 0) {\n      ok(result) => console.log("Success:", result),\n      error(msg) => console.log("Error:", msg)\n    }\n  }\n}\n```\n\n## Optional Values\n\nHandling values that might be null:\n\n```typescript\nmodule optional {\n  fn find_user(id int) {\n    if id <= 0 {\n      return null;\n    }\n    return User{\n      id: id,\n      name: "User " + string(id)\n    };\n  }\n\n  fn greet_user(id int) {\n    var user = find_user(id);\n    if user != null {\n      console.log("Hello,", user.name);\n    } else {\n      console.log("User not found");\n    }\n  }\n}\n```\n\n## Error Recovery\n\nImplementing retry logic for operations that might fail:\n\n```typescript\nmodule retry {\n  fn async retry_operation(operation fn() error) {\n    var max_attempts int = 3;\n    var delay_ms int = 1000;\n\n    for var attempt int = 1; attempt <= max_attempts; attempt++ {\n      match await operation() {\n        ok(result) => return ok(result),\n        error(e) => {\n          if attempt == max_attempts {\n            return error("Max attempts reached: " + e);\n          }\n          console.log("Attempt", attempt, "failed:", e);\n          await time.sleep(delay_ms);\n          delay_ms *= 2;  // Exponential backoff\n        }\n      }\n    }\n  }\n\n  fn async main() {\n    match await retry_operation(fetch_data) {\n      ok(data) => console.log("Success:", data),\n      error(msg) => console.log("Final error:", msg)\n    }\n  }\n}\n```\n\n## Error Context\n\nAdding context to errors:\n\n```typescript\nmodule context {\n  struct DatabaseError {\n    code int\n    message string\n    query string\n  }\n\n  fn query_database(sql string) {\n    if sql.length() == 0 {\n      return error(DatabaseError{\n        code: 400,\n        message: "Empty query",\n        query: sql\n      });\n    }\n    // Perform query...\n    return ok("Query results");\n  }\n\n  fn main() {\n    match query_database("") {\n      ok(result) => console.log(result),\n      error(e) => {\n        console.log("Error code:", e.code);\n        console.log("Message:", e.message);\n        console.log("Query:", e.query);\n      }\n    }\n  }\n}\n```\n\n## Error Logging\n\nProper error logging practices:\n\n```typescript\nmodule logging {\n  fn log_error(context string, error string) {\n    var timestamp = time.now().format("2006-01-02 15:04:05");\n    console.error("[ERROR]", timestamp, "-", context, ":", error);\n  }\n\n  fn process_data(data []int) {\n    match validate_data(data) {\n      ok(_) => {\n        // Process the data\n      },\n      error(msg) => {\n        log_error("Data validation", msg);\n        return error(msg);\n      }\n    }\n  }\n}\n```\n\n## Next Steps\n\n1. Learn about [Control Flow](/reference/control-flow/)\n2. Explore [Functions](/reference/functions/)\n3. See [Types](/reference/types/)\n4. Check the [Standard Library](/reference/stdlib/)', "src/content/docs/reference/error-handling.mdx", "c49fc0b4d3c01d4e", "reference/example", { id: 158, data: 160, body: 166, filePath: 167, digest: 168, rendered: 169 }, { title: 161, description: 162, editUrl: 16, head: 163, template: 52, sidebar: 164, pagefind: 16, draft: 39 }, "Example Reference", "A reference page in my new Starlight docs site.", [], { hidden: 39, attrs: 165 }, {}, "Reference pages are ideal for outlining how things work in terse and clear terms.\nLess concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what you're documenting.\n\n## Further reading\n\n- Read [about reference](https://diataxis.fr/reference/) in the Diátaxis framework", "src/content/docs/reference/example.md", "8addf1dc1ec3c10f", { html: 170, metadata: 171 }, '<p>Reference pages are ideal for outlining how things work in terse and clear terms.\nLess concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what you’re documenting.</p>\n<h2 id="further-reading">Further reading</h2>\n<ul>\n<li>Read <a href="https://diataxis.fr/reference/">about reference</a> in the Diátaxis framework</li>\n</ul>', { headings: 172, localImagePaths: 174, remoteImagePaths: 175, frontmatter: 176, imagePaths: 177 }, [173], { depth: 96, slug: 97, text: 98 }, [], [], { title: 161, description: 162 }, [], "reference/functions", { id: 178, data: 180, body: 186, filePath: 187, digest: 188, deferredRender: 16 }, { title: 181, description: 182, editUrl: 16, head: 183, template: 52, sidebar: 184, pagefind: 16, draft: 39 }, "Functions", "Complete reference for functions in R2D2", [], { hidden: 39, attrs: 185 }, {}, '## Function Declarations\n\nFunctions in R2D2 are declared using the `fn` keyword and must be inside a module:\n\n```typescript\nmodule calculator {\n  fn add(a int, b int) {\n    return a + b;\n  }\n\n  fn greet(name string) {\n    console.log("Hello,", name);\n  }\n\n  fn main() {\n    var result = add(5, 3);\n    greet("R2D2");\n  }\n}\n```\n\n## Parameters\n\n### Basic Parameters\n\nParameters require explicit type annotations:\n\n```typescript\nmodule parameters {\n  fn multiply(x int, y int) {\n    return x * y;\n  }\n\n  fn concat(str1 string, str2 string) {\n    return str1 + str2;\n  }\n}\n```\n\n### Optional Parameters\n\nOptional parameters are denoted with a `?` after the parameter name:\n\n```typescript\nmodule greeting {\n  fn greet(name string, title? string) {\n    if title != null {\n      console.log("Hello,", title, name);\n    } else {\n      console.log("Hello,", name);\n    }\n  }\n\n  fn main() {\n    greet("John");           // Prints: Hello, John\n    greet("John", "Mr.");    // Prints: Hello, Mr. John\n  }\n}\n```\n\n### Default Parameters\n\nParameters can have default values:\n\n```typescript\nmodule counter {\n  fn count_from(start int = 0, end int = 10) {\n    for var i int = start; i < end; i++ {\n      console.log(i);\n    }\n  }\n\n  fn main() {\n    count_from();          // Counts 0 to 9\n    count_from(5);         // Counts 5 to 9\n    count_from(1, 5);      // Counts 1 to 4\n  }\n}\n```\n\n### Rest Parameters\n\nRest parameters allow functions to accept any number of arguments:\n\n```typescript\nmodule math {\n  fn sum(...numbers []int) {\n    var total int = 0;\n    for var i int = 0; i < numbers.length(); i++ {\n      total += numbers[i];\n    }\n    return total;\n  }\n\n  fn main() {\n    var result = sum(1, 2, 3, 4, 5);  // Returns 15\n  }\n}\n```\n\n## Return Values\n\nFunctions can return single or multiple values:\n\n```typescript\nmodule math {\n  // Single return value\n  fn square(x int) {\n    return x * x;\n  }\n\n  // Multiple return values\n  fn divide(a int, b int) {\n    var quotient = a / b;\n    var remainder = a % b;\n    return quotient, remainder;\n  }\n\n  fn main() {\n    var q, r = divide(10, 3);\n    console.log("Quotient:", q);    // Prints: Quotient: 3\n    console.log("Remainder:", r);   // Prints: Remainder: 1\n  }\n}\n```\n\n## Function Types\n\nFunctions are first-class values in R2D2:\n\n```typescript\nmodule calculator {\n  // Function type as parameter\n  fn apply(x int, y int, operation fn(int, int)) {\n    return operation(x, y);\n  }\n\n  fn add(a int, b int) {\n    return a + b;\n  }\n\n  fn multiply(a int, b int) {\n    return a * b;\n  }\n\n  fn main() {\n    var sum = apply(5, 3, add);        // Returns 8\n    var product = apply(5, 3, multiply); // Returns 15\n  }\n}\n```\n\n## Async Functions\n\nAsync functions are supported for asynchronous operations:\n\n```typescript\nmodule fetcher {\n  fn async fetch_data(url string) {\n    var response = await http.get(url);\n    return response.text();\n  }\n\n  fn async main() {\n    var data = await fetch_data("https://api.example.com/data");\n    console.log(data);\n  }\n}\n```\n\n## Function Decorators\n\nDecorators can modify or enhance function behavior:\n\n```typescript\nmodule logging {\n  fn log_decorator(fn_name string) {\n    return fn(target fn()) {\n      return fn() {\n        console.log("Calling function:", fn_name);\n        var result = target();\n        console.log("Function completed:", fn_name);\n        return result;\n      };\n    };\n  }\n\n  @log_decorator("hello")\n  fn hello() {\n    console.log("Hello, world!");\n  }\n}\n```\n\n## Next Steps\n\n1. Learn about [Modules](/reference/modules/)\n2. Explore [Control Flow](/reference/control-flow/)\n3. See [Types](/reference/types/)\n4. Check the [Standard Library](/reference/stdlib/)', "src/content/docs/reference/functions.mdx", "1858f7420d20cccf", "reference/introduction", { id: 189, data: 191, body: 197, filePath: 198, digest: 199, deferredRender: 16 }, { title: 192, description: 193, editUrl: 16, head: 194, template: 52, sidebar: 195, pagefind: 16, draft: 39 }, "Introduction to R2D2", "Learn about R2D2's core concepts and features", [], { hidden: 39, attrs: 196 }, {}, 'R2D2 is a modern programming language designed with safety, expressiveness, and reliability in mind. It compiles to JavaScript, making it a perfect choice for web applications, server-side development, and more.\n\n## Core Features\n\n### Type System\n\nR2D2\'s type system helps catch errors at compile time while maintaining a clean and expressive syntax:\n\n```typescript\n// Built-in types\nlet age: i32 = 25;\nlet price: f64 = 99.99;\nlet name: string = "R2D2";\nlet isActive: bool = true;\n\n// Arrays and collections\nlet numbers: i32[] = [1, 2, 3, 4, 5];\nlet scores: Map<string, i32> = new Map();\n```\n\n### Error Handling\n\nBuilt-in Result type for explicit error handling:\n\n```typescript\nfn divide(a: f64, b: f64): Result<f64, string> {\n  if b == 0 {\n    return error("Division by zero");\n  }\n  return ok(a / b);\n}\n\n// Using match for error handling\nmatch divide(10, 2) {\n  ok(result) => console.log("Result:", result),\n  error(msg) => console.error("Error:", msg)\n}\n```\n\n### Modules & Interfaces\n\nOrganize your code with modules and define contracts with interfaces:\n\n```typescript\ninterface Logger {\n  fn log(message: string): void;\n  fn error(message: string): void;\n}\n\nmodule ConsoleLogger implements Logger {\n  fn log(message: string): void {\n    console.log("[INFO]", message);\n  }\n  \n  fn error(message: string): void {\n    console.error("[ERROR]", message);\n  }\n}\n```\n\n### Functions\n\nFirst-class functions with type inference and pattern matching:\n\n```typescript\n// Regular function definition\nfn add(a: i32, b: i32): i32 {\n  return a + b;\n}\n\n// Concise function with type inference\nfn multiply(a: i32, b: i32) = a * b;\n\n// Higher-order functions\nfn apply(f: fn(i32, i32) -> i32, x: i32, y: i32): i32 {\n  return f(x, y);\n}\n```\n\n### Async Programming\n\nBuilt-in support for asynchronous programming:\n\n```typescript\nasync fn fetchData(url: string): Result<string, string> {\n  try {\n    let response = await fetch(url);\n    let text = await response.text();\n    return ok(text);\n  } catch (e) {\n    return error("Failed to fetch data: " + e.message);\n  }\n}\n```\n\n## Next Steps\n\n- Follow the [Quick Start Guide](/guides/quick-start/) to write your first R2D2 program\n- Learn about [installing R2D2](/guides/installation/) on your system\n- Explore [example projects](/examples/) to see R2D2 in action\n- Browse the [Standard Library](/reference/stdlib/) documentation', "src/content/docs/reference/introduction.mdx", "4c109a561fda6eea", "reference/stdlib", { id: 200, data: 202, body: 208, filePath: 209, digest: 210, deferredRender: 16 }, { title: 203, description: 204, editUrl: 16, head: 205, template: 52, sidebar: 206, pagefind: 16, draft: 39 }, "Standard Library", "Overview of R2D2's standard library modules and functionality", [], { hidden: 39, attrs: 207 }, {}, '## Core Types\n\nBasic operations with core types:\n\n```typescript\nmodule core_examples {\n  // Result type for error handling\n  fn divide(a int, b int) {\n    if b == 0 {\n      return error("Division by zero");\n    }\n    return ok(a / b);\n  }\n\n  // Option type for nullable values\n  fn find_item(items []string, index int) {\n    if index < 0 || index >= items.length() {\n      return null;\n    }\n    return items[index];\n  }\n}\n```\n\n## Collections\n\nWorking with arrays, maps and sets:\n\n```typescript\nmodule collections {\n  // Array operations\n  fn array_ops() {\n    var numbers = [1, 2, 3, 4, 5];\n    numbers.push(6);\n    numbers.pop();\n    \n    var filtered = numbers.filter(fn(n) { return n % 2 == 0; });\n    var doubled = numbers.map(fn(n) { return n * 2; });\n  }\n\n  // Map operations\n  fn map_ops() {\n    var scores = Map<string, int>{};\n    scores.set("Alice", 100);\n    scores.set("Bob", 85);\n    \n    if scores.has("Alice") {\n      console.log(scores.get("Alice"));\n    }\n  }\n\n  // Set operations\n  fn set_ops() {\n    var unique = Set<int>{};\n    unique.add(1);\n    unique.add(2);\n    unique.add(1);  // Ignored (already exists)\n    \n    console.log(unique.size());  // Prints: 2\n  }\n}\n```\n\n## IO & System\n\nFile and console operations:\n\n```typescript\nmodule io {\n  fn async file_ops() {\n    // Write to file\n    match await fs.write_file("test.txt", "Hello, World!") {\n      ok(_) => console.log("File written"),\n      error(e) => console.error("Write error:", e)\n    }\n\n    // Read from file\n    match await fs.read_file("test.txt") {\n      ok(content) => console.log("Content:", content),\n      error(e) => console.error("Read error:", e)\n    }\n  }\n\n  fn console_ops() {\n    console.log("Info message");\n    console.error("Error message");\n    console.warn("Warning message");\n  }\n}\n```\n\n## Async Programming\n\nWorking with promises and timers:\n\n```typescript\nmodule async_examples {\n  fn async fetch_data() {\n    match await http.get("https://api.example.com/data") {\n      ok(response) => return ok(response.json()),\n      error(e) => return error("Failed to fetch: " + e)\n    }\n  }\n\n  fn async delayed_operation() {\n    await time.sleep(1000);  // Sleep for 1 second\n    console.log("Operation completed");\n  }\n}\n```\n\n## Text Processing\n\nString and regex operations:\n\n```typescript\nmodule text {\n  fn string_ops() {\n    var text = "Hello, World!";\n    console.log(text.upper());  // HELLO, WORLD!\n    console.log(text.lower());  // hello, world!\n    console.log(text.trim());   // Hello, World!\n    \n    var parts = text.split(", ");\n    console.log(parts);  // ["Hello", "World!"]\n  }\n\n  fn regex_ops() {\n    var pattern = regex.compile("\\\\w+@\\\\w+\\\\.\\\\w+");\n    var email = "user@example.com";\n    \n    if pattern.matches(email) {\n      console.log("Valid email");\n    }\n  }\n}\n```\n\n## Math\n\nMathematical operations:\n\n```typescript\nmodule math_examples {\n  fn basic_math() {\n    console.log(math.abs(-42));     // 42\n    console.log(math.max(10, 20));  // 20\n    console.log(math.min(10, 20));  // 10\n    console.log(math.pow(2, 3));    // 8\n  }\n\n  fn random_ops() {\n    console.log(math.random());        // Random float between 0 and 1\n    console.log(math.random_int(100)); // Random int between 0 and 99\n  }\n}\n```\n\n## Testing\n\nUnit testing utilities:\n\n```typescript\nmodule tests {\n  fn test_addition() {\n    assert.equal(1 + 1, 2, "1 + 1 should equal 2");\n    assert.not_equal(1 + 1, 3, "1 + 1 should not equal 3");\n  }\n\n  fn test_async async() {\n    var result = await fetch_data();\n    assert.ok(result, "Data should be fetched successfully");\n  }\n}\n```\n\n## Next Steps\n\n1. Explore [Core Types](/reference/types/)\n2. Learn about [Collections](/reference/collections/)\n3. See [IO & System](/reference/io/)\n4. Check [Async Programming](/reference/async/)', "src/content/docs/reference/stdlib.mdx", "7f12ecb7f4de8fc7", "reference/modules", { id: 211, data: 213, body: 219, filePath: 220, digest: 221, deferredRender: 16 }, { title: 214, description: 215, editUrl: 16, head: 216, template: 52, sidebar: 217, pagefind: 16, draft: 39 }, "Modules", "Complete reference for modules in R2D2", [], { hidden: 39, attrs: 218 }, {}, '## Module Declarations\n\nEvery R2D2 file must have exactly one module:\n\n```typescript\nmodule math {\n  fn add(a int, b int) {\n    return a + b;\n  }\n\n  fn multiply(a int, b int) {\n    return a * b;\n  }\n}\n```\n\n## Module State\n\nModules can contain state variables:\n\n```typescript\nmodule counter {\n  var count int = 0\n\n  fn increment() {\n    count++\n  }\n\n  fn get_count() {\n    return count\n  }\n\n  fn reset() {\n    count = 0\n  }\n}\n```\n\n## Nested Modules\n\nModules can be nested for better organization:\n\n```typescript\nmodule math {\n  module arithmetic {\n    fn add(a int, b int) {\n      return a + b;\n    }\n\n    fn subtract(a int, b int) {\n      return a - b;\n    }\n  }\n\n  module geometry {\n    fn circle_area(radius float) {\n      return 3.14159 * radius * radius;\n    }\n\n    fn square_area(side float) {\n      return side * side;\n    }\n  }\n}\n```\n\n## Structs in Modules\n\nModules can contain struct definitions:\n\n```typescript\nmodule shapes {\n  struct Point {\n    x float\n    y float\n  }\n\n  struct Rectangle {\n    top_left Point\n    width float\n    height float\n  }\n\n  fn area(rect Rectangle) {\n    return rect.width * rect.height;\n  }\n\n  fn main() {\n    var p = Point{x: 10.0, y: 20.0};\n    var r = Rectangle{\n      top_left: p,\n      width: 30.0,\n      height: 40.0\n    };\n    console.log("Area:", area(r));\n  }\n}\n```\n\n## Module Imports\n\nImporting from other modules:\n\n```typescript\n// math.r2d2\nmodule math {\n  fn add(a int, b int) {\n    return a + b;\n  }\n}\n\n// main.r2d2\nmodule main {\n  import math\n\n  fn main() {\n    var result = math.add(5, 3);\n    console.log("Result:", result);\n  }\n}\n```\n\n## Module Initialization\n\nModules can have initialization code:\n\n```typescript\nmodule database {\n  var connection = null\n\n  fn init() {\n    connection = db.connect("localhost:5432");\n    console.log("Database connected");\n  }\n\n  fn query(sql string) {\n    if connection == null {\n      init();\n    }\n    return connection.execute(sql);\n  }\n}\n```\n\n## Best Practices\n\n### Module Organization\n\n```typescript\nmodule user_service {\n  // Public interface\n  struct User {\n    id int\n    name string\n    email string\n  }\n\n  // Internal state\n  var users []User = []\n\n  // Public functions\n  fn create_user(name string, email string) {\n    var user = User{\n      id: generate_id(),\n      name: name,\n      email: email\n    };\n    users.append(user);\n    return user;\n  }\n\n  fn get_user(id int) {\n    for var i int = 0; i < users.length(); i++ {\n      if users[i].id == id {\n        return users[i];\n      }\n    }\n    return null;\n  }\n\n  // Private helper functions\n  fn generate_id() {\n    return users.length() + 1;\n  }\n}\n```\n\n## Next Steps\n\n1. Learn about [Functions](/reference/functions/)\n2. Explore [Types](/reference/types/)\n3. See [Control Flow](/reference/control-flow/)\n4. Check the [Standard Library](/reference/stdlib/)', "src/content/docs/reference/modules.mdx", "28ca3f6faa5e0ae7", "reference/types", { id: 222, data: 224, body: 230, filePath: 231, digest: 232, deferredRender: 16 }, { title: 225, description: 226, editUrl: 16, head: 227, template: 52, sidebar: 228, pagefind: 16, draft: 39 }, "Types & Variables", "Complete reference for R2D2's type system and variable declarations", [], { hidden: 39, attrs: 229 }, {}, '## Basic Types\n\nR2D2 provides several built-in types for common use cases:\n\n### Numeric Types\n\n```typescript\nmodule numbers {\n  fn main() {\n    // Integer types\n    var i8_val int8 = 127;\n    var i16_val int16 = 32767;\n    var i32_val int32 = 2147483647;\n    var i64_val int64 = 9223372036854775807;\n    \n    // Unsigned integers\n    var u8_val uint8 = 255;\n    var u16_val uint16 = 65535;\n    var u32_val uint32 = 4294967295;\n    var u64_val uint64 = 18446744073709551615;\n    \n    // Floating point\n    var f32_val float32 = 3.14159;\n    var f64_val float64 = 3.14159265359;\n  }\n}\n```\n\n### Text Types\n\n```typescript\nmodule text {\n  fn main() {\n    // String type\n    var message string = "Hello, R2D2!";\n    var char_val char = \'A\';\n    \n    // String operations\n    var length int = message.length();\n    var upper string = message.toUpper();\n    var sub string = message.substring(0, 5);\n  }\n}\n```\n\n### Boolean Type\n\n```typescript\nmodule boolean {\n  fn main() {\n    var flag bool = true;\n    var is_false bool = false;\n    \n    // Boolean operations\n    var and_result bool = flag && is_false;\n    var or_result bool = flag || is_false;\n    var not_result bool = !flag;\n  }\n}\n```\n\n### Void Type\n\n```typescript\nfn noReturn(): void {\n    // Function that doesn\'t return a value\n}\n\nlet void_val: void = void;           // Void value\n```\n\n## Composite Types\n\n### Arrays\n\n```typescript\nmodule arrays {\n  fn main() {\n    // Array declarations\n    var numbers []int = [1, 2, 3, 4, 5];\n    var matrix [][]int = [[1, 2], [3, 4]];\n    \n    // Array operations\n    var first int = numbers[0];\n    var len int = numbers.length();\n    numbers.append(6);\n  }\n}\n```\n\n### Tuples\n\n```typescript\n// Fixed-size heterogeneous collections\nlet tuple: (i32, string, bool) = (42, "hello", true);\n\n// Tuple access\nlet first_elem = tuple.0;           // Access by index\nlet (num, text, flag) = tuple;      // Destructuring\n```\n\n### Objects\n\n```typescript\n// Object literals\nlet point = {\n    x: 10,\n    y: 20,\n    toString(): string {\n        return `(${x}, ${y})`;\n    }\n};\n\n// Object type annotations\ninterface Point {\n    x: i32;\n    y: i32;\n    toString(): string;\n}\n\nlet typed_point: Point = point;\n```\n\n## Generic Types\n\n### Generic Functions\n\n```typescript\nfn identity<T>(value: T): T {\n    return value;\n}\n\n// Using generic functions\nlet num = identity<i32>(42);\nlet text = identity<string>("hello");\n```\n\n### Generic Interfaces\n\n```typescript\ninterface Container<T> {\n    fn get(): T;\n    fn set(value: T): void;\n}\n\nmodule Box<T> implements Container<T> {\n    let value: T;\n    \n    fn get(): T {\n        return value;\n    }\n    \n    fn set(newValue: T): void {\n        value = newValue;\n    }\n}\n```\n\n### Generic Constraints\n\n```typescript\ninterface Comparable {\n    fn compareTo(other: Self): i32;\n}\n\nfn max<T: Comparable>(a: T, b: T): T {\n    return if a.compareTo(b) > 0 { a } else { b };\n}\n```\n\n## Type Aliases\n\n```typescript\n// Simple type aliases\ntype UserId = i32;\ntype UserMap = Map<UserId, User>;\n\n// Complex type aliases\ntype Result<T, E> = Ok<T> | Error<E>;\ntype Callback<T> = fn(value: T): void;\n```\n\n## Union Types\n\n```typescript\n// Union type definition\ntype NumberOrString = i32 | string;\n\nfn process(value: NumberOrString): string {\n    match value {\n        i32 => value.toString(),\n        string => value\n    }\n}\n```\n\n## Type Inference\n\nR2D2 has powerful type inference:\n\n```typescript\nmodule inference {\n  fn main() {\n    // Type inference with var\n    var x = 42;          // Inferred as int\n    var pi = 3.14159;    // Inferred as float\n    var msg = "Hello";   // Inferred as string\n    var done = false;    // Inferred as bool\n    \n    // Array type inference\n    var numbers = [1, 2, 3];  // Inferred as []int\n  }\n}\n```\n\n## Type Conversion\n\n### Implicit Conversions\n\n```typescript\nlet small: i32 = 42;\nlet big: i64 = small;               // i32 -> i64 (safe)\nlet float: f64 = small;             // i32 -> f64 (safe)\n```\n\n### Explicit Conversions\n\n```typescript\nlet big: i64 = 1000;\nlet small: i32 = big as i32;        // Explicit conversion required\nlet truncated: i32 = 3.14 as i32;   // f64 -> i32 requires cast\n```\n\n## Type Safety Features\n\n### Null Safety\n\nR2D2 has no null values. Use Option type instead:\n\n```typescript\ntype Option<T> = Some<T> | None;\n\nfn findUser(id: UserId): Option<User> {\n    // Implementation\n}\n\nmatch findUser(123) {\n    Some(user) => console.log(user.name),\n    None => console.log("User not found")\n}\n```\n\n### Type Assertions\n\n```typescript\nlet value: any = getData();\nlet str = value as string;          // Runtime type check\nlet num = value as! i32;            // Throws if not i32\n```\n\n## Variable Declaration\n\nVariables in R2D2 are declared using the `var` keyword followed by the variable name and type:\n\n```typescript\nmodule variables {\n  fn main() {\n    // Basic variable declarations\n    var name string = "R2D2";\n    var age int = 42;\n    var height float = 1.75;\n    var is_active bool = true;\n    \n    // Multiple declarations\n    var (\n      x int = 10\n      y int = 20\n      z int = 30\n    )\n    \n    // Array variables\n    var scores []int = [90, 85, 95];\n    var grid [][]bool = [[true, false], [false, true]];\n  }\n}\n```\n\n## Structs\n\n```typescript\nmodule structs {\n  struct Point {\n    x float\n    y float\n  }\n  \n  fn main() {\n    var p Point = Point{x: 10.0, y: 20.0};\n    console.log("X:", p.x);\n    console.log("Y:", p.y);\n  }\n}\n```\n\n## Next Steps\n\n1. Learn about [Functions](/reference/functions/)\n2. Explore [Modules](/reference/modules/)\n3. See [Control Flow](/reference/control-flow/)\n4. Check the [Standard Library](/reference/stdlib/)', "src/content/docs/reference/types.mdx", "2e6fed62109516d5"];
export {
  _astro_dataLayerContent as default
};
