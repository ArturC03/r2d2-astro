import { c as createVNode, F as Fragment, _ as __astro_tag_component__ } from "./astro/server_D8491iH5.mjs";
const frontmatter = {
  "title": "R2D2 Language Basics",
  "description": "Learn the fundamental concepts and syntax of the R2D2 programming language"
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "basic-syntax",
    "text": "Basic Syntax"
  }, {
    "depth": 3,
    "slug": "variables-and-constants",
    "text": "Variables and Constants"
  }, {
    "depth": 3,
    "slug": "basic-types",
    "text": "Basic Types"
  }, {
    "depth": 3,
    "slug": "type-inference",
    "text": "Type Inference"
  }, {
    "depth": 2,
    "slug": "functions",
    "text": "Functions"
  }, {
    "depth": 2,
    "slug": "control-flow",
    "text": "Control Flow"
  }, {
    "depth": 3,
    "slug": "if-expressions",
    "text": "If Expressions"
  }, {
    "depth": 3,
    "slug": "loops",
    "text": "Loops"
  }, {
    "depth": 2,
    "slug": "modules-and-interfaces",
    "text": "Modules and Interfaces"
  }, {
    "depth": 3,
    "slug": "modules",
    "text": "Modules"
  }, {
    "depth": 3,
    "slug": "interfaces",
    "text": "Interfaces"
  }, {
    "depth": 2,
    "slug": "arrays-and-collections",
    "text": "Arrays and Collections"
  }, {
    "depth": 3,
    "slug": "arrays",
    "text": "Arrays"
  }, {
    "depth": 3,
    "slug": "maps",
    "text": "Maps"
  }, {
    "depth": 2,
    "slug": "error-handling",
    "text": "Error Handling"
  }, {
    "depth": 2,
    "slug": "next-steps",
    "text": "Next Steps"
  }];
}
function _createMdxContent(props) {
  const { Fragment: Fragment2 } = props.components || {};
  if (!Fragment2) _missingMdxReference("Fragment");
  return createVNode(Fragment2, {
    "set:html": '<h2 id="basic-syntax">Basic Syntax</h2>\n<p>R2D2 uses a clean, modern syntax that should feel familiar to developers coming from other languages.</p>\n<h3 id="variables-and-constants">Variables and Constants</h3>\n<p>Variables are declared using <code dir="auto">let</code> and constants with <code dir="auto">const</code>:</p>\n<div class="expressive-code"><link rel="stylesheet" href="/_astro/ec.tm3va.css"><script type="module" src="/_astro/ec.8zarh.js"><\/script><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">mutable</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#F78C6C;--1:#AA0982">42</span><span style="--0:#D6DEEB;--1:#403F53">;        </span><span style="--0:#919F9F;--1:#5D6376">// Mutable variable</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">PI</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#F78C6C;--1:#AA0982">3.14159</span><span style="--0:#D6DEEB;--1:#403F53">;      </span><span style="--0:#919F9F;--1:#5D6376">// Immutable constant</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="let mutable = 42;        // Mutable variableconst PI = 3.14159;      // Immutable constant"><div></div></button></div></figure></div>\n<h3 id="basic-types">Basic Types</h3>\n<p>R2D2 has several built-in types:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">integer</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">i32</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#F78C6C;--1:#AA0982">42</span><span style="--0:#D6DEEB;--1:#403F53">;           </span><span style="--0:#919F9F;--1:#5D6376">// 32-bit integer</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">float</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">f64</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#F78C6C;--1:#AA0982">3.14</span><span style="--0:#D6DEEB;--1:#403F53">;          </span><span style="--0:#919F9F;--1:#5D6376">// 64-bit floating point</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">text</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#C5E478;--1:#3B61B0">string</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">Hello</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">;      </span><span style="--0:#919F9F;--1:#5D6376">// String type</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">flag</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">bool</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#FF6A83;--1:#A24848">true</span><span style="--0:#D6DEEB;--1:#403F53">;          </span><span style="--0:#919F9F;--1:#5D6376">// Boolean type</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">nothing</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#C5E478;--1:#3B61B0">void</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#7FDBCA;--1:#096E72">void</span><span style="--0:#D6DEEB;--1:#403F53">;       </span><span style="--0:#919F9F;--1:#5D6376">// Void type</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="let integer: i32 = 42;           // 32-bit integerlet float: f64 = 3.14;          // 64-bit floating pointlet text: string = &#x22;Hello&#x22;;      // String typelet flag: bool = true;          // Boolean typelet nothing: void = void;       // Void type"><div></div></button></div></figure></div>\n<h3 id="type-inference">Type Inference</h3>\n<p>R2D2 has smart type inference, so type annotations are often optional:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">age</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#F78C6C;--1:#AA0982">25</span><span style="--0:#D6DEEB;--1:#403F53">;              </span><span style="--0:#919F9F;--1:#5D6376">// Inferred as i32</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">name</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">R2D2</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">;         </span><span style="--0:#919F9F;--1:#5D6376">// Inferred as string</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">active</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#FF6A83;--1:#A24848">true</span><span style="--0:#D6DEEB;--1:#403F53">;         </span><span style="--0:#919F9F;--1:#5D6376">// Inferred as bool</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="let age = 25;              // Inferred as i32let name = &#x22;R2D2&#x22;;         // Inferred as stringlet active = true;         // Inferred as bool"><div></div></button></div></figure></div>\n<h2 id="functions">Functions</h2>\n<p>Functions are declared using the <code dir="auto">fn</code> keyword:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">add</span><span style="--0:#D6DEEB;--1:#403F53">(a: i32, b: i32): i32 {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#C792EA;--1:#8844AE">return</span><span style="--0:#D6DEEB;--1:#403F53"> a </span><span style="--0:#C792EA;--1:#8844AE">+</span><span style="--0:#D6DEEB;--1:#403F53"> b;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Functions with single expressions can be shortened</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">multiply</span><span style="--0:#D6DEEB;--1:#403F53">(a: i32, b: i32) </span><span style="--0:#C792EA;--1:#8844AE">=</span><span style="--0:#D6DEEB;--1:#403F53"> a </span><span style="--0:#C792EA;--1:#8844AE">*</span><span style="--0:#D6DEEB;--1:#403F53"> b;</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Functions with no return value</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">log</span><span style="--0:#D6DEEB;--1:#403F53">(message: string): </span><span style="--0:#7FDBCA;--1:#096E72">void</span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// Implementation</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="fn add(a: i32, b: i32): i32 {    return a + b;}// Functions with single expressions can be shortenedfn multiply(a: i32, b: i32) = a * b;// Functions with no return valuefn log(message: string): void {    // Implementation}"><div></div></button></div></figure></div>\n<h2 id="control-flow">Control Flow</h2>\n<h3 id="if-expressions">If Expressions</h3>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">if</span><span style="--0:#D6DEEB;--1:#403F53"> condition {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">} </span><span style="--0:#C792EA;--1:#8844AE">else</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">if</span><span style="--0:#D6DEEB;--1:#403F53"> other_condition {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">} </span><span style="--0:#C792EA;--1:#8844AE">else</span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// If expressions can return values</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">max</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">if</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#D6DEEB;--1:#403F53">a</span><span style="--0:#C792EA;--1:#8844AE"> > </span><span style="--0:#D6DEEB;--1:#403F53">b</span><span style="--0:#C792EA;--1:#8844AE"> { </span><span style="--0:#D6DEEB;--1:#403F53">a</span><span style="--0:#C792EA;--1:#8844AE"> } </span><span style="--0:#D6DEEB;--1:#403F53">else</span><span style="--0:#C792EA;--1:#8844AE"> { </span><span style="--0:#D6DEEB;--1:#403F53">b</span><span style="--0:#C792EA;--1:#8844AE"> }</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="if condition {    // code} else if other_condition {    // code} else {    // code}// If expressions can return valueslet max = if a > b { a } else { b };"><div></div></button></div></figure></div>\n<h3 id="loops">Loops</h3>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// While loop</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">while</span><span style="--0:#D6DEEB;--1:#403F53"> condition {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// For loop over range</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">for i </span><span style="--0:#7FDBCA;--1:#096E72">in</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#F78C6C;--1:#AA0982">0..10</span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// For loop over array</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">for item </span><span style="--0:#7FDBCA;--1:#096E72">in</span><span style="--0:#D6DEEB;--1:#403F53"> array {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#919F9F;--1:#5D6376">// code</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="// While loopwhile condition {    // code}// For loop over rangefor i in 0..10 {    // code}// For loop over arrayfor item in array {    // code}"><div></div></button></div></figure></div>\n<h2 id="modules-and-interfaces">Modules and Interfaces</h2>\n<h3 id="modules">Modules</h3>\n<p>Modules help organize code into reusable units:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">module</span><span style="--0:#D6DEEB;--1:#403F53"> Math {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">add</span><span style="--0:#D6DEEB;--1:#403F53">(a: i32, b: i32): i32 {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#C792EA;--1:#8844AE">return</span><span style="--0:#D6DEEB;--1:#403F53"> a </span><span style="--0:#C792EA;--1:#8844AE">+</span><span style="--0:#D6DEEB;--1:#403F53"> b;</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">subtract</span><span style="--0:#D6DEEB;--1:#403F53">(a: i32, b: i32): i32 {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#C792EA;--1:#8844AE">return</span><span style="--0:#D6DEEB;--1:#403F53"> a </span><span style="--0:#C792EA;--1:#8844AE">-</span><span style="--0:#D6DEEB;--1:#403F53"> b;</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Using module functions</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">sum</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">Math</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">add</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#F78C6C;--1:#AA0982">5</span><span style="--0:#C792EA;--1:#8844AE">, </span><span style="--0:#F78C6C;--1:#AA0982">3</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="module Math {    fn add(a: i32, b: i32): i32 {        return a + b;    }    fn subtract(a: i32, b: i32): i32 {        return a - b;    }}// Using module functionslet sum = Math.add(5, 3);"><div></div></button></div></figure></div>\n<h3 id="interfaces">Interfaces</h3>\n<p>Interfaces define contracts that modules can implement:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">interface</span><span style="--0:#D6DEEB;--1:#403F53"> Shape {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">area</span><span style="--0:#D9F5DD;--1:#111111">()</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#FFCB8B;--1:#111111">f64</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">perimeter</span><span style="--0:#D9F5DD;--1:#111111">()</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#FFCB8B;--1:#111111">f64</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">module</span><span style="--0:#D6DEEB;--1:#403F53"> Rectangle implements Shape {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">width</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">f64</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">height</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">f64</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">area</span><span style="--0:#D6DEEB;--1:#403F53">(): f64 {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#C792EA;--1:#8844AE">return</span><span style="--0:#D6DEEB;--1:#403F53"> width </span><span style="--0:#C792EA;--1:#8844AE">*</span><span style="--0:#D6DEEB;--1:#403F53"> height;</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">perimeter</span><span style="--0:#D6DEEB;--1:#403F53">(): f64 {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#C792EA;--1:#8844AE">return</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#F78C6C;--1:#AA0982">2</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">*</span><span style="--0:#D6DEEB;--1:#403F53"> (width </span><span style="--0:#C792EA;--1:#8844AE">+</span><span style="--0:#D6DEEB;--1:#403F53"> height);</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="interface Shape {    fn area(): f64;    fn perimeter(): f64;}module Rectangle implements Shape {    let width: f64;    let height: f64;    fn area(): f64 {        return width * height;    }    fn perimeter(): f64 {        return 2 * (width + height);    }}"><div></div></button></div></figure></div>\n<h2 id="arrays-and-collections">Arrays and Collections</h2>\n<h3 id="arrays">Arrays</h3>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Fixed-size arrays</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">numbers</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#C792EA;--1:#8844AE"> </span><span style="--0:#FFCB8B;--1:#111111">i32</span><span style="--0:#D6DEEB;--1:#403F53">[]</span><span style="--0:#C792EA;--1:#8844AE"> =</span><span style="--0:#D6DEEB;--1:#403F53"> [</span><span style="--0:#F78C6C;--1:#AA0982">1</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">2</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">3</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">4</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">5</span><span style="--0:#D6DEEB;--1:#403F53">];</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Array operations</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">first</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">numbers[</span><span style="--0:#F78C6C;--1:#AA0982">0</span><span style="--0:#D6DEEB;--1:#403F53">];</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">length</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">numbers</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">length</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="// Fixed-size arrayslet numbers: i32[] = [1, 2, 3, 4, 5];// Array operationslet first = numbers[0];let length = numbers.length;"><div></div></button></div></figure></div>\n<h3 id="maps">Maps</h3>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">scores</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#82AAFF;--1:#3B61B0">Map</span><span style="--0:#C792EA;--1:#8844AE">&#x3C;</span><span style="--0:#C5E478;--1:#3B61B0">string</span><span style="--0:#C792EA;--1:#8844AE">, </span><span style="--0:#FFCB8B;--1:#111111">i32</span><span style="--0:#C792EA;--1:#8844AE">></span><span style="--0:#D6DEEB;--1:#403F53">();</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">scores</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">set</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">Alice</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">100</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">scores</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">set</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">Bob</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">, </span><span style="--0:#F78C6C;--1:#AA0982">85</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">aliceScore</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">scores</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">get</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">Alice</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="let scores = Map<string, i32>();scores.set(&#x22;Alice&#x22;, 100);scores.set(&#x22;Bob&#x22;, 85);let aliceScore = scores.get(&#x22;Alice&#x22;);"><div></div></button></div></figure></div>\n<h2 id="error-handling">Error Handling</h2>\n<p>R2D2 uses a Result type for error handling:</p>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="typescript"><code><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">fn </span><span style="--0:#82AAFF;--1:#3B61B0">divide</span><span style="--0:#D6DEEB;--1:#403F53">(a: i32, b: i32): Result</span><span style="--0:#C792EA;--1:#8844AE">&#x3C;</span><span style="--0:#D6DEEB;--1:#403F53">f64, string</span><span style="--0:#C792EA;--1:#8844AE">></span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">if b </span><span style="--0:#C792EA;--1:#8844AE">==</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#F78C6C;--1:#AA0982">0</span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">return </span><span style="--0:#82AAFF;--1:#3B61B0">Error</span><span style="--0:#D9F5DD;--1:#111111">(</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#ECC48D;--1:#984E4D">Division by zero</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D9F5DD;--1:#111111">)</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">return </span><span style="--0:#82AAFF;--1:#3B61B0">Ok</span><span style="--0:#D9F5DD;--1:#111111">(</span><span style="--1:#403F53"><span style="--0:#D7DBE0">a</span><span style="--0:#D6DEEB"> </span><span style="--0:#D7DBE0">as</span><span style="--0:#D6DEEB"> </span><span style="--0:#D7DBE0">f64</span><span style="--0:#D6DEEB"> / </span><span style="--0:#D7DBE0">b</span><span style="--0:#D6DEEB"> </span><span style="--0:#D7DBE0">as</span><span style="--0:#D6DEEB"> </span><span style="--0:#D7DBE0">f64</span></span><span style="--0:#D9F5DD;--1:#111111">)</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5D6376">// Using Results</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">let </span><span style="--0:#D6DEEB;--1:#403F53">result</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#82AAFF;--1:#3B61B0">divide</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#F78C6C;--1:#AA0982">10</span><span style="--0:#C792EA;--1:#8844AE">, </span><span style="--0:#F78C6C;--1:#AA0982">2</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">match result {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#82AAFF;--1:#3B61B0">Ok</span><span style="--0:#D6DEEB;--1:#403F53">(value) </span><span style="--0:#C792EA;--1:#8844AE">=></span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#919F9F;--1:#5D6376">// Use value</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#82AAFF;--1:#3B61B0">Error</span><span style="--0:#D6DEEB;--1:#403F53">(message) </span><span style="--0:#C792EA;--1:#8844AE">=></span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#919F9F;--1:#5D6376">// Handle error</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="fn divide(a: i32, b: i32): Result<f64, string> {    if b == 0 {        return Error(&#x22;Division by zero&#x22;);    }    return Ok(a as f64 / b as f64);}// Using Resultslet result = divide(10, 2);match result {    Ok(value) => {        // Use value    },    Error(message) => {        // Handle error    }}"><div></div></button></div></figure></div>\n<h2 id="next-steps">Next Steps</h2>\n<p>Now that you understand the basics, you can:</p>\n<ol>\n<li>Explore <a href="/guides/advanced/">Advanced Features</a></li>\n<li>Learn about <a href="/guides/js-interop/">JavaScript Interop</a></li>\n<li>Check out the <a href="/reference/stdlib/">Standard Library</a></li>\n<li>Try building some <a href="/examples/">Example Projects</a></li>\n</ol>'
  });
}
function MDXContent(props = {}) {
  const { wrapper: MDXLayout } = props.components || {};
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected component `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/guides/basics.mdx";
const file = "/home/rutra/Documentos/CODE/PAP/r2d2-astro/src/content/docs/guides/basics.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment, ...props.components }
});
Content[Symbol.for("mdx-component")] = true;
Content[Symbol.for("astro.needsHeadRendering")] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/rutra/Documentos/CODE/PAP/r2d2-astro/src/content/docs/guides/basics.mdx";
__astro_tag_component__(Content, "astro:jsx");
export {
  Content,
  Content as default,
  file,
  frontmatter,
  getHeadings,
  url
};
